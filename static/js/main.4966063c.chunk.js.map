{"version":3,"sources":["components/Layout/GridLayout.js","components/Layout/CellUtilities.js","components/BinaryTree/BinaryTree.js","components/Common/Cell.js","components/Common/Grid.js","components/BinaryTree/BinaryTreePage.js","components/Sidewinder/SidewinderPage.js","components/Sidewinder/Sidewinder.js","components/Common/GridPage.js","components/Home/HomePage.js","routes/AppRoutes.js","App.js","reportWebVitals.js","index.js"],"names":["ReactGridLayout","WidthProvider","RGL","defaultModel","x","y","borderWidth","generateLayout","model","map","cell","index","w","h","i","generateDom","style","borderStyle","borderColor","textAlign","onLayoutChange","layout","GridLayout","cols","useMeasure","ref","bounds","className","isDraggable","isResizable","margin","rowHeight","width","sides","openSides","test","createDisplayCell","sample","list","randomNumber","length","mult","Math","floor","random","Cell","row","column","this","north","south","east","west","links","link","bidirectional","push","filter","unlink","getLinks","reduce","acc","cv","Grid","rows","columns","grid","prepareGrid","prepareCells","j","eachCell","col","getCell","eachRow","generateModel","neighbors","n","neighbor","createBinaryTree","openWalls","BinaryTreePage","run","atEastBound","atNorthBound","member","createSidewinder","SidewinderPage","modelGenerators","name","page","GridPage","useState","numRows","setNumRows","numCols","setNumCols","Row","Col","xs","InputGroup","Text","FormControl","type","value","onChange","ev","target","max","Tabs","defaultActiveKey","transition","gen","Tab","eventKey","title","parseInt","withRouter","AppRoutes","basename","process","path","exact","component","HomePage","App","rel","href","integrity","crossOrigin","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4966063c.chunk.js","sourcesContent":["import React from 'react'\nimport RGL, { WidthProvider } from 'react-grid-layout'\nimport useMeasure from 'react-use-measure'\n\nconst ReactGridLayout = WidthProvider(RGL)\n\nconst defaultModel = [{x: 0, y: 0, borderWidth: '1px'}, {x: 1, y: 0, borderWidth: '1px'}, {x: 12, y: 0, borderWidth: '1px'}]\n\nconst generateLayout = (model) => {\n    return model.map((cell, index) => ({x: cell.x, y: cell.y, w: 1, h: 1, i: `${index}`}))\n}\n\nconst generateDom = (model) => {\n    return model.map((cell, index) => (\n        <div\n            key={index} \n            style={{borderStyle: 'solid', borderColor: 'black', borderWidth: cell.borderWidth, textAlign:'center'}}\n        />\n    ))\n}\n\nconst onLayoutChange = (layout) => {\n    \n}\n\nconst GridLayout = ({model, cols = 4}) => {\n    \n    const [ ref, bounds ] = useMeasure()\n\n    return (\n        <div ref={ref}>\n            <ReactGridLayout\n                layout={generateLayout(model ?? defaultModel)}\n                onLayoutChange={onLayoutChange}\n                className='layout'\n                isDraggable={false}\n                isResizable={false}\n                cols={cols}\n                margin={[0,0]}\n                rowHeight={bounds.width / cols}\n            >\n                {generateDom(model ?? defaultModel)}\n            </ReactGridLayout>\n        </div>\n    )\n}\n\nexport default GridLayout","export const sides = {\n    left: 1, \n    right: 2, \n    top: 4, \n    bottom: 8,\n    getBorderOnSide: (openSides, test) => (openSides & test) === test ? 0 : '1px' \n}\n\nexport const createDisplayCell = (x, y, openSides) => {\n    return {\n        x, \n        y, \n        borderWidth: `${sides.getBorderOnSide(openSides, sides.top)} ${sides.getBorderOnSide(openSides, sides.right)} ${sides.getBorderOnSide(openSides, sides.bottom)} ${sides.getBorderOnSide(openSides, sides.left)}`\n    }\n}","import { Grid } from \"../Common/Grid\"\n\nexport const createBinaryTree = (grid) => {\n    if (!grid)\n        return new Grid(4, 4)\n\n    for (const cell of grid.eachCell()) {\n        let neighbors = [cell.north, cell.east]\n        neighbors = [...neighbors.filter(n => !!n)]\n\n        const neighbor = sample(neighbors)\n\n        if (!!neighbor)\n            cell.link(neighbor)\n    }\n\n    return grid\n}\n\nexport const sample = (list) => {\n    return list[randomNumber(list.length)]\n}\n\nexport const randomNumber = (mult) => {\n    return Math.floor(Math.random() * mult)\n}","import { sides } from \"../Layout/CellUtilities\"\n\nexport class Cell {\n    row\n    column\n    north\n    south\n    east\n    west\n\n    constructor(row, column, ...links) {\n        this.row = row\n        this.column = column\n        this.north = {}\n        this.south = {}\n        this.east = {}\n        this.west = {}\n        this.links = links ?? []\n    }\n\n    *getLinks() {\n        for (const link of this.links) {\n            yield link;\n        }\n    }\n\n    link(cell, bidirectional = true) {\n        this.links.push(cell)\n\n        if (bidirectional)\n            cell.link(this, false)\n    }\n\n    unlink(cell, bidirectional = true) {\n        this.links = [...this.links.filter(link => link !== cell)]\n\n        if (bidirectional)\n            cell.unlink(this, false)\n    }\n\n    neighbors() {\n        const list = []\n        \n        if (this.north)\n            list.push(this.north)\n        if (this.south)\n            list.push(this.south)\n        if (this.east)\n            list.push(this.east)\n        if (this.west)\n            list.push(this.west)\n\n        return list\n    }\n\n    openWalls() {\n        const list = []\n\n        for (const link of this.getLinks()) {\n            if (link === this.north)\n                list.push(sides.top)\n            else if (link === this.south)\n                list.push(sides.bottom)\n            else if (link === this.east)\n                list.push(sides.right)\n            else if (link === this.west)\n                list.push(sides.left)\n        }\n\n        if (list.length < 1)\n            return []\n\n        return list.reduce((acc, cv) => acc | cv)\n    }\n}","import { randomNumber } from '../BinaryTree/BinaryTree'\nimport { Cell } from './Cell'\n\nexport class Grid {\n    constructor(rows, columns) {\n        this.rows = rows\n        this.columns = columns\n        this.grid = this.prepareGrid()\n        this.prepareCells()\n    }\n\n    prepareGrid() {\n        const rows = []\n        for (let i = 0; i < this.rows; i++) {\n            const row = []\n            for (let j = 0; j < this.columns; j++) {\n                row.push(new Cell(i, j))\n            }\n            rows.push(row)\n        }\n\n        return rows\n    }\n\n    prepareCells() {\n        for (const cell of this.eachCell()) {\n            const row = cell.row\n            const col = cell.column\n\n            cell.north = this.getCell(row - 1, col)\n            cell.south = this.getCell(row + 1, col)\n            cell.east = this.getCell(row, col + 1)\n            cell.west = this.getCell(row, col - 1)\n        }\n    }\n\n    getCell(row, col) {\n        if (row >= this.rows || row < 0)\n            return null\n        if (col < 0 || col >= this.grid[row].length)\n            return null\n        \n        return this.grid[row][col]\n    }\n\n    randomCell() {\n        const row = randomNumber(this.rows)\n        const col = randomNumber(this.grid[row].length)\n        return this.getCell(row, col)\n    }\n\n    getSize() {\n        return this.rows * this.columns\n    }\n\n    *eachRow() {\n        for (const row of this.grid){\n            yield row\n        }\n    }\n\n    *eachCell() {\n        for (const row of this.eachRow()) {\n            for (const cell of row) {\n                yield cell\n            }\n        }\n    }\n}","import React from 'react'\nimport GridLayout from \"../Layout/GridLayout\"\nimport { createDisplayCell } from '../Layout/CellUtilities'\nimport { Grid } from '../Common/Grid'\nimport { createBinaryTree } from './BinaryTree'\n\nconst generateModel = (rows, cols) => {\n    const model = []\n\n    for (const cell of createBinaryTree(new Grid(rows, cols)).eachCell()) {\n        model.push(createDisplayCell(cell.column, cell.row, cell.openWalls()))\n    }\n\n    return model\n}\n\nconst BinaryTreePage = ({rows = 4, cols = 4}) => {\n    const model = generateModel(rows, cols)\n\n    return (<GridLayout model={model} cols={cols}/>)\n}\n\nexport default BinaryTreePage","import React from 'react'\nimport GridLayout from \"../Layout/GridLayout\"\nimport { createDisplayCell } from '../Layout/CellUtilities'\nimport { Grid } from '../Common/Grid'\nimport { createSidewinder } from './Sidewinder'\n\nconst generateModel = (rows, cols) => {\n    const model = []\n\n    for (const cell of createSidewinder(new Grid(rows, cols)).eachCell()) {\n        model.push(createDisplayCell(cell.column, cell.row, cell.openWalls()))\n    }\n\n    return model\n}\n\nconst SidewinderPage = ({rows = 4, cols = 4}) => {\n    const model = generateModel(rows, cols)\n\n    return (<GridLayout model={model} cols={cols}/>)\n}\n\nexport default SidewinderPage","import { randomNumber, sample } from \"../BinaryTree/BinaryTree\"\n\nexport const createSidewinder = (grid) => {\n    if (!grid)\n        return\n\n    for (const row of grid.eachRow()) {\n        let run = []\n        for (const cell of row) {\n            run.push(cell)\n\n            const atEastBound = !cell.east\n            const atNorthBound = !cell.north\n            const shouldCloseOut = atEastBound || (!atNorthBound && randomNumber(2) === 0)\n\n            if (shouldCloseOut) {\n                const member = sample(run)\n                \n                if (!!member.north)\n                    member.link(member.north)\n\n                run = []               \n            } else {\n                cell.link(cell.east)\n            }\n        }\n    }\n\n    return grid\n}","import React, { useState } from 'react'\nimport { Col, FormControl, Row, Tab, Tabs, InputGroup } from 'react-bootstrap'\n\nimport BinaryTreePage from '../BinaryTree/BinaryTreePage'\nimport SidewinderPage from '../Sidewinder/SidewinderPage'\n\nconst modelGenerators = [\n    { name: 'Binary Tree', page: BinaryTreePage },\n    { name: 'Sidewinder', page: SidewinderPage },\n]\n\nconst GridPage = () => {\n    const [numRows, setNumRows] = useState(4)\n    const [numCols, setNumCols] = useState(4)\n\n    return (\n        <div>\n            <Row>\n                <Col xs={6}>\n                    <InputGroup>\n                        <InputGroup.Text>Rows</InputGroup.Text>\n                        <FormControl \n                            type='number' \n                            value={numRows}\n                            onChange={(ev) => setNumRows(ev.target.value)} \n                            max={20}\n                        />\n                    </InputGroup>\n                </Col>\n                <Col xs={6}>\n                    <InputGroup>\n                        <InputGroup.Text>Columns</InputGroup.Text>\n                        <FormControl \n                            type='number' \n                            value={numCols} \n                            onChange={(ev) => setNumCols(ev.target.value)} \n                            max={20}\n                        />\n                    </InputGroup>\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n                    <Tabs defaultActiveKey={modelGenerators[0].name} transition={false}>\n                        {\n                            modelGenerators.map((gen, index) => (\n                                <Tab key={index} eventKey={gen.name} title={gen.name}>\n                                    {<gen.page rows={parseInt(numRows)} cols={parseInt(numCols)}/>}\n                                </Tab>\n                            ))\n                        }\n                    </Tabs>\n                </Col>\n            </Row>\n        </div>\n    )\n}\n\nexport default GridPage","import React from 'react'\nimport { withRouter } from 'react-router-dom'\nimport GridPage from '../Common/GridPage'\n\nconst HomePage = () => {\n    return (<GridPage />)\n}\n\nexport default withRouter(HomePage)","import React from 'react'\nimport {BrowserRouter, Route, Switch} from 'react-router-dom'\n\nimport BinaryTreePage from '../components/BinaryTree/BinaryTreePage'\nimport HomePage from '../components/Home/HomePage'\nimport SidewinderPage from '../components/Sidewinder/SidewinderPage'\n\nconst AppRoutes = () => (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <Switch>\n            <Route path='/' exact component={HomePage} />\n            <Route path='/BinaryTree' exact component={BinaryTreePage} />\n            <Route path='/Sidewinder' exact component={SidewinderPage} />\n        </Switch>\n    </BrowserRouter>\n)\n\nexport default AppRoutes","import './App.css';\nimport AppRoutes from './routes/AppRoutes';\n\nconst App = () => (\n    <div>\n        <link\n            rel=\"stylesheet\"\n            href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.0/dist/css/bootstrap.min.css\"\n            integrity=\"sha384-KyZXEAg3QhqLMpG8r+8fhAXLRk2vvoC2f3B09zVXn8CA5QIVfZOJ3BCsw2P0p/We\"\n            crossOrigin=\"anonymous\"\n        />\n        <AppRoutes />\n    </div>\n)\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}