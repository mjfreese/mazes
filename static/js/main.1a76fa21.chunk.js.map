{"version":3,"sources":["components/Layout/CellUtilities.js","components/Common/Distances.js","components/Common/Cell.js","components/Common/Grid.js","components/BinaryTree/BinaryTree.js","components/Layout/GridLayout.js","components/Common/DistanceGrid.js","components/Common/GridPage.js","components/Sidewinder/Sidewinder.js","components/Home/HomePage.js","routes/AppRoutes.js","App.js","reportWebVitals.js","index.js"],"names":["sides","openSides","test","createDisplayCell","x","y","contents","background","borderWidth","componentToHex","c","hex","toString","length","Distances","root","distancesByCoord","cellsByCoord","keys","this","accessor","getCellAccessor","push","cell","column","row","visitedCell","distance","goal","setExit","setEntrance","current","breadCrumbs","goalDist","getDistance","addCell","rootAccessor","currentDistance","getLinks","neighbor","neighborDist","setPath","maxDistance","maxCell","key","Cell","north","south","east","west","links","link","bidirectional","filter","unlink","list","reduce","acc","cv","distances","frontier","newFrontier","linked","g","b","red","Math","floor","green","Grid","rows","columns","grid","prepareGrid","prepareCells","i","j","eachCell","col","getCell","randomNumber","eachRow","sample","mult","random","ReactGridLayout","WidthProvider","RGL","generateLayout","model","map","index","w","h","generateDom","style","borderStyle","borderColor","textAlign","onLayoutChange","layout","createModel","showSolution","showLongestPath","enter","exit","start","pathTo","max","newDistances","getSolution","openWalls","contentsOfCell","GridLayout","cols","width","className","isDraggable","isResizable","margin","rowHeight","DistanceGrid","modelGenerators","name","generator","neighbors","n","run","atEastBound","atNorthBound","member","getNewTargetCellCoord","console","log","isNaN","parseInt","GridPage","useState","numRows","setNumRows","numCols","setNumCols","setShowSolution","entrance","setShowLongestPath","Row","Col","xs","InputGroup","Text","FormControl","type","value","onChange","ev","target","Form","marginTop","FormCheck","inline","label","checked","old","min","Tabs","defaultActiveKey","transition","gen","Tab","eventKey","title","modelGenerator","withRouter","AppRoutes","basename","process","path","exact","component","HomePage","App","rel","href","integrity","crossOrigin","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1a76fa21.chunk.js","sourcesContent":["export const sides = {\n    left: 1, \n    right: 2, \n    top: 4, \n    bottom: 8,\n    getBorderOnSide: (openSides, test) => (openSides & test) === test ? 0 : '1px' \n}\n\nexport const createDisplayCell = (x, y, openSides, contents = '', background = '#ffffff') => {\n    return {\n        x, \n        y, \n        borderWidth: `${sides.getBorderOnSide(openSides, sides.top)} ${sides.getBorderOnSide(openSides, sides.right)} ${sides.getBorderOnSide(openSides, sides.bottom)} ${sides.getBorderOnSide(openSides, sides.left)}`,\n        contents,\n        background\n    }\n}\n\nconst componentToHex = (c) => {\n    var hex = c.toString(16)\n    return hex.length === 1 ? `0${hex}` : hex\n}\n  \nexport const rgbToHex = (r, g, b) => {\n    return `#${componentToHex(r)}${componentToHex(g)}${componentToHex(b)}`\n}","export class Distances {\n    root\n    distancesByCoord = []\n    cellsByCoord = []\n    keys = []\n    \n    constructor(root) {\n        this.root = root\n        const accessor = this.getCellAccessor(root)\n        this.distancesByCoord[accessor] = 0\n        this.cellsByCoord[accessor] = root\n        this.keys.push(accessor)\n    }\n\n    getCellAccessor(cell) {\n        return `x${cell.column}y${cell.row}`\n    }\n\n    getDistance(cell) {\n        const accessor = this.getCellAccessor(cell)\n        if (this.visitedCell(cell))\n            return this.distancesByCoord[accessor]\n    }\n\n    addCell(cell, distance) {\n        const accessor = this.getCellAccessor(cell)\n        this.distancesByCoord[accessor] = distance\n        this.cellsByCoord[accessor] = cell\n        this.keys.push(accessor)\n    }\n\n    getCellKeys() {\n        return this.cellsByCoord\n    }\n\n    visitedCell(cell) {\n        return !!this.cellsByCoord[this.getCellAccessor(cell)]\n    }\n\n    pathTo(goal) {\n        if (!goal)\n            return\n\n        goal.setExit()\n        this.root.setEntrance()\n        let current = goal\n        let breadCrumbs = new Distances(this.root)\n        const goalDist = this.getDistance(goal)\n\n        breadCrumbs.addCell(current, this.getDistance(current))\n        \n        const rootAccessor = this.getCellAccessor(this.root)\n\n        while (this.getCellAccessor(current) !== rootAccessor) {\n            const currentDistance = this.getDistance(current)\n            for (const neighbor of current.getLinks()) {\n                const neighborDist = this.getDistance(neighbor)\n                if (neighborDist < currentDistance) {\n                    breadCrumbs.addCell(neighbor, neighborDist)\n                    current = neighbor\n\n                    if (this.getCellAccessor(neighbor) !== rootAccessor)\n                        neighbor.setPath(neighborDist, goalDist)\n                    break\n                }\n            }\n        }\n\n        return breadCrumbs\n    }\n\n    max() {\n        let maxDistance = 0\n        let maxCell = this.root\n\n        for (const key of this.keys) {\n            const cell = this.cellsByCoord[key]\n            const distance = this.getDistance(cell)\n            if (distance > maxDistance) {\n                maxCell = cell\n                maxDistance = distance\n            }\n        }\n\n        return [maxCell, maxDistance]\n    }\n}","import { rgbToHex, sides } from \"../Layout/CellUtilities\"\nimport { Distances } from \"./Distances\"\n\nexport class Cell {\n    row\n    column\n    north\n    south\n    east\n    west\n    background = '#ffffff'\n\n    constructor(row, column, ...links) {\n        this.row = row\n        this.column = column\n        this.north = {}\n        this.south = {}\n        this.east = {}\n        this.west = {}\n        this.links = links ?? []\n    }\n\n    *getLinks() {\n        for (const link of this.links) {\n            yield link;\n        }\n    }\n\n    link(cell, bidirectional = true) {\n        this.links.push(cell)\n\n        if (bidirectional)\n            cell.link(this, false)\n    }\n\n    unlink(cell, bidirectional = true) {\n        this.links = [...this.links.filter(link => link !== cell)]\n\n        if (bidirectional)\n            cell.unlink(this, false)\n    }\n\n    neighbors() {\n        const list = []\n        \n        if (this.north)\n            list.push(this.north)\n        if (this.south)\n            list.push(this.south)\n        if (this.east)\n            list.push(this.east)\n        if (this.west)\n            list.push(this.west)\n\n        return list\n    }\n\n    openWalls() {\n        const list = []\n\n        for (const link of this.getLinks()) {\n            if (link === this.north)\n                list.push(sides.top)\n            else if (link === this.south)\n                list.push(sides.bottom)\n            else if (link === this.east)\n                list.push(sides.right)\n            else if (link === this.west)\n                list.push(sides.left)\n        }\n\n        if (list.length < 1)\n            return []\n\n        return list.reduce((acc, cv) => acc | cv)\n    }\n\n    distances() {\n        const distances = new Distances(this)\n        let frontier = [ this ]\n\n        while(frontier.length > 0) {\n            const newFrontier = []\n            for (const cell of frontier) {\n                for (const linked of cell.links) {\n                    if (distances.visitedCell(linked))\n                        continue\n                    \n                    distances.addCell(linked, distances.getDistance(cell) + 1)\n                    newFrontier.push(linked)\n                }\n            }\n\n            frontier = newFrontier\n        }\n\n        return distances\n    }\n\n    setEntrance() {\n        this.background = '#00ff00'\n    }\n\n    setExit() {\n        this.background = '#ff0000'\n    }\n\n    setPath(currentDistance, maxDistance) {\n        const red = Math.floor(255 * currentDistance / maxDistance)\n        const green = Math.floor(255 * (maxDistance - currentDistance) / maxDistance)\n        this.background = rgbToHex(red, green, 0)\n    }\n}","import { randomNumber } from '../BinaryTree/BinaryTree'\nimport { Cell } from './Cell'\n\nexport class Grid {\n    constructor(rows, columns) {\n        this.rows = rows\n        this.columns = columns\n        this.grid = this.prepareGrid()\n        this.prepareCells()\n    }\n\n    prepareGrid() {\n        const rows = []\n        for (let i = 0; i < this.rows; i++) {\n            const row = []\n            for (let j = 0; j < this.columns; j++) {\n                row.push(new Cell(i, j))\n            }\n            rows.push(row)\n        }\n\n        return rows\n    }\n\n    prepareCells() {\n        for (const cell of this.eachCell()) {\n            const row = cell.row\n            const col = cell.column\n\n            cell.north = this.getCell(row - 1, col)\n            cell.south = this.getCell(row + 1, col)\n            cell.east = this.getCell(row, col + 1)\n            cell.west = this.getCell(row, col - 1)\n        }\n    }\n\n    getCell(row, col) {\n        if (row >= this.rows || row < 0)\n            return null\n        if (!this.grid[row] || col < 0 || col >= this.grid[row].length)\n            return null\n        \n        return this.grid[row][col]\n    }\n\n    randomCell() {\n        const row = randomNumber(this.rows)\n        const col = randomNumber(this.grid[row].length)\n        return this.getCell(row, col)\n    }\n\n    getSize() {\n        return this.rows * this.columns\n    }\n\n    *eachRow() {\n        for (const row of this.grid){\n            yield row\n        }\n    }\n\n    *eachCell() {\n        for (const row of this.eachRow()) {\n            for (const cell of row) {\n                yield cell\n            }\n        }\n    }\n\n    contentsOfCell(cell) {\n        return ''\n    }\n}","import { Grid } from \"../Common/Grid\"\n\nexport const createBinaryTree = (grid) => {\n    if (!grid)\n        return new Grid(4, 4)\n\n    for (const cell of grid.eachCell()) {\n        let neighbors = [cell.north, cell.east]\n        neighbors = [...neighbors.filter(n => !!n)]\n\n        const neighbor = sample(neighbors)\n\n        if (!!neighbor)\n            cell.link(neighbor)\n    }\n\n    return grid\n}\n\nexport const sample = (list) => {\n    return list[randomNumber(list.length)]\n}\n\nexport const randomNumber = (mult) => {\n    return Math.floor(Math.random() * mult)\n}","import React from 'react'\nimport RGL, { WidthProvider } from 'react-grid-layout'\nimport { createDisplayCell } from './CellUtilities'\n\nconst ReactGridLayout = WidthProvider(RGL)\n\nconst generateLayout = (model) => {\n    return model.map((cell, index) => ({x: cell.x, y: cell.y, w: 1, h: 1, i: `${index}`}))\n}\n\nconst generateDom = (model) => {\n    return model.map((cell, index) => (\n        <div\n            key={index} \n            style={{borderStyle: 'solid', borderColor: 'black', borderWidth: cell.borderWidth, textAlign:'center', background: cell.background}}\n        >\n            {cell.contents}\n        </div>\n    ))\n}\n\nconst onLayoutChange = (layout) => {\n    \n}\n\nconst getSolution = (showSolution, showLongestPath, enter, exit, grid) => {\n    if (showSolution)\n    {\n        const start = grid.getCell(...enter)\n\n        if (!start)\n            return\n\n        const distances = start.distances()\n        grid.distances = distances.pathTo(grid.getCell(...exit))\n    }\n\n    else if (showLongestPath)\n    {\n        const start = grid.getCell(0, 0)\n\n        if (!start)\n            return\n\n        const distances = start.distances()\n\n        const [newStart, /*UNUSED*/] = distances.max()\n        const newDistances = newStart.distances()\n\n        const [goal, /*UNUSED*/] = newDistances.max()\n        grid.distances = newDistances.pathTo(goal)\n    }\n}\n\nconst createModel = (showSolution, showLongestPath, enter, exit, grid) => {\n    if (showSolution || showLongestPath) {\n        getSolution(showSolution, showLongestPath, enter, exit, grid)\n    }\n\n    const model = []\n    for (const cell of grid.eachCell()) {\n        model.push(createDisplayCell(\n            cell.column,\n            cell.row, \n            cell.openWalls(), \n            grid.contentsOfCell(cell),\n            cell.background))\n    }\n    return model\n}\n\nconst GridLayout = ({grid, showSolution, showLongestPath, enter, exit, cols = 4}) => {\n    \n    const model = createModel(showSolution, showLongestPath, enter, exit, grid)\n\n    return (\n        <div style={{width: '500px'}}>\n            <ReactGridLayout\n                layout={generateLayout(model)}\n                onLayoutChange={onLayoutChange}\n                className='layout'\n                isDraggable={false}\n                isResizable={false}\n                cols={cols || 0}\n                margin={[0,0]}\n                rowHeight={500 / cols}\n            >\n                {generateDom(model)}\n            </ReactGridLayout>\n        </div>\n    )\n}\n\nexport default GridLayout\n","import { Grid } from \"./Grid\";\n\nexport class DistanceGrid extends Grid {\n    distances\n\n    contentsOfCell(cell) {\n        if (!!this.distances)\n            return this.distances.getDistance(cell)\n        else super.contentsOfCell(cell)\n    }\n}","import React, { useState } from 'react'\nimport { Col, FormControl, Row, Tab, Tabs, InputGroup, FormCheck, Form } from 'react-bootstrap'\n\nimport { createBinaryTree } from '../BinaryTree/BinaryTree'\nimport GridLayout from '../Layout/GridLayout'\nimport { createSidewinder } from '../Sidewinder/Sidewinder'\nimport { DistanceGrid } from './DistanceGrid'\n\nconst modelGenerators = [\n    { name: 'Binary Tree', generator: createBinaryTree },\n    { name: 'Sidewinder', generator: createSidewinder },\n]\n\nconst generateModel = (rows, cols, modelGenerator) => {\n    const grid = new DistanceGrid(rows, cols)\n    return modelGenerator(grid)\n}\n\nconst getNewTargetCellCoord = (row, col) => {\n    console.log(row, col)\n    return [isNaN(row) ? 0 : parseInt(row), isNaN(col) ? 0 : parseInt(col)]\n}\n\nconst GridPage = () => {\n    const [numRows, setNumRows] = useState(4)\n    const [numCols, setNumCols] = useState(4)\n    const [showSolution, setShowSolution] = useState(false)\n    const [entrance, setEntrance] = useState([0,0])\n    const [exit, setExit] = useState([3, 3])\n    const [showLongestPath, setShowLongestPath] = useState(false)\n\n    return (\n        <div>\n            <Row>\n                <Col xs={4}>\n                    <InputGroup>\n                        <InputGroup.Text>Rows</InputGroup.Text>\n                        <FormControl \n                            type='number' \n                            value={numRows}\n                            onChange={(ev) => setNumRows(parseInt(ev.target.value))} \n                            max={20}\n                        />\n                    </InputGroup>\n                </Col>\n                <Col xs={4}>\n                    <InputGroup>\n                        <InputGroup.Text>Columns</InputGroup.Text>\n                        <FormControl \n                            type='number' \n                            value={numCols} \n                            onChange={(ev) => setNumCols(parseInt(ev.target.value))} \n                            max={20}\n                        />\n                    </InputGroup>\n                </Col>\n                <Col xs={4}>\n                    <Form style={{marginTop:'7px', textAlign:'center'}}>\n                        <FormCheck\n                            inline\n                            type='radio'\n                            label='Show Solution'\n                            name='slnGroup'\n                            checked={showSolution}\n                            onChange={(ev) => {\n                                setShowSolution(true)\n                                setShowLongestPath(false)\n                            }}\n                        />\n                        <FormCheck\n                            inline\n                            type='radio'\n                            label='Show Longest Path'\n                            name='slnGroup'\n                            checked={showLongestPath}\n                            onChange={(ev) => {\n                                setShowSolution(false)\n                                setShowLongestPath(true)\n                            }}\n                        />\n                        <FormCheck\n                            inline\n                            type='radio'\n                            label='None'\n                            name='slnGroup'\n                            checked={!showLongestPath && !showSolution}\n                            onChange={(ev) => {\n                                setShowLongestPath(false)\n                                setShowSolution(false)\n                            }}\n                        />\n                    </Form>\n                </Col>\n            </Row>\n            <Row>\n                <Col xs={6}>\n                    <InputGroup>\n                        <InputGroup.Text>Entrance (row, col)</InputGroup.Text>\n                        <FormControl \n                            type='number' \n                            value={entrance[0]} \n                            onChange={(ev) => setEntrance(old => getNewTargetCellCoord(ev.target.value, old[1]))} \n                            min={0}\n                            max={numRows - 1}\n                        />\n                        <FormControl \n                            type='number' \n                            value={entrance[1]} \n                            onChange={(ev) => setEntrance(old => getNewTargetCellCoord(old[0], ev.target.value))}\n                            min={0}\n                            max={numCols - 1}\n                        />\n                    </InputGroup>\n                </Col>\n                <Col xs={6}>\n                    <InputGroup>\n                        <InputGroup.Text>Exit (row, col)</InputGroup.Text>\n                        <FormControl \n                            type='number' \n                            value={exit[0]} \n                            onChange={(ev) => setExit(old => getNewTargetCellCoord(ev.target.value, old[1]))}\n                            min={0}\n                            max={numRows - 1}\n                        />\n                        <FormControl \n                            type='number' \n                            value={exit[1]} \n                            onChange={(ev) => setExit(old => getNewTargetCellCoord(old[0], ev.target.value))}\n                            min={0}\n                            max={numCols - 1}\n                        />\n                    </InputGroup>\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n                    <Tabs defaultActiveKey={modelGenerators[0].name} transition={false}>\n                        {\n                            modelGenerators.map((gen, index) => (\n                                <Tab key={index} eventKey={gen.name} title={gen.name}>\n                                    <center>\n                                    {\n                                        <GridLayout\n                                            grid={generateModel(\n                                                numRows, \n                                                numCols,\n                                                gen.generator)}\n                                            enter={entrance}\n                                            exit={exit}\n                                            showLongestPath={showLongestPath}\n                                            showSolution={showSolution}\n                                            cols={numCols}\n                                        />\n                                    }\n                                    </center>\n                                </Tab>\n                            ))\n                        }\n                    </Tabs>\n                </Col>\n            </Row>\n        </div>\n    )\n}\n\nexport default GridPage","import { randomNumber, sample } from \"../BinaryTree/BinaryTree\"\n\nexport const createSidewinder = (grid) => {\n    if (!grid)\n        return\n\n    for (const row of grid.eachRow()) {\n        let run = []\n        for (const cell of row) {\n            run.push(cell)\n\n            const atEastBound = !cell.east\n            const atNorthBound = !cell.north\n            const shouldCloseOut = atEastBound || (!atNorthBound && randomNumber(2) === 0)\n\n            if (shouldCloseOut) {\n                const member = sample(run)\n                \n                if (!!member.north)\n                    member.link(member.north)\n\n                run = []               \n            } else {\n                cell.link(cell.east)\n            }\n        }\n    }\n\n    return grid\n}","import React from 'react'\nimport { withRouter } from 'react-router-dom'\nimport GridPage from '../Common/GridPage'\n\nconst HomePage = () => {\n    return (<GridPage />)\n}\n\nexport default withRouter(HomePage)","import React from 'react'\nimport {BrowserRouter, Route, Switch} from 'react-router-dom'\n\nimport HomePage from '../components/Home/HomePage'\n\nconst AppRoutes = () => (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <Switch>\n            <Route path='/' exact component={HomePage} />\n        </Switch>\n    </BrowserRouter>\n)\n\nexport default AppRoutes","import './App.css';\nimport AppRoutes from './routes/AppRoutes';\n\nconst App = () => (\n    <div>\n        <link\n            rel=\"stylesheet\"\n            href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.0/dist/css/bootstrap.min.css\"\n            integrity=\"sha384-KyZXEAg3QhqLMpG8r+8fhAXLRk2vvoC2f3B09zVXn8CA5QIVfZOJ3BCsw2P0p/We\"\n            crossOrigin=\"anonymous\"\n        />\n        <AppRoutes />\n    </div>\n)\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}