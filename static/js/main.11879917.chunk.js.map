{"version":3,"sources":["components/Layout/GridLayout.js","components/Layout/CellUtilities.js","components/BinaryTree/BinaryTreePage.js","components/Home/HomePage.js","routes/AppRoutes.js","App.js","reportWebVitals.js","index.js"],"names":["ReactGridLayout","WidthProvider","RGL","defaultModel","x","y","borderWidth","generateLayout","model","map","cell","index","w","h","i","generateDom","style","borderStyle","borderColor","textAlign","onLayoutChange","layout","GridLayout","cols","className","isDraggable","isResizable","margin","sides","openSides","test","createCell","BinaryTreePage","rows","j","push","rand","Math","floor","random","console","log","generateModel","routes","NavItem","route","to","withRouter","AppRoutes","basename","process","path","exact","component","HomePage","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.11879917.chunk.js","sourcesContent":["import React from 'react'\nimport RGL, { WidthProvider } from 'react-grid-layout'\n\nconst ReactGridLayout = WidthProvider(RGL)\n\nconst defaultModel = [{x: 0, y: 0, borderWidth: '1px'}, {x: 1, y: 0, borderWidth: '1px'}, {x: 12, y: 0, borderWidth: '1px'}]\n\nconst generateLayout = (model) => {\n    return model.map((cell, index) => ({x: cell.x, y: cell.y, w: 1, h: 1, i: `${index}`}))\n}\n\nconst generateDom = (model) => {\n    return model.map((cell, index) => (\n        <div\n            key={index} \n            style={{borderStyle: 'solid', borderColor: 'black', borderWidth: cell.borderWidth, textAlign:'center'}}\n        />\n    ))\n}\n\nconst onLayoutChange = (layout) => {\n    \n}\n\nconst GridLayout = ({model, cols = 12}) => {\n    return (\n        <ReactGridLayout\n            layout={generateLayout(model ?? defaultModel)}\n            onLayoutChange={onLayoutChange}\n            className='layout'\n            isDraggable={false}\n            isResizable={false}\n            cols={cols}\n            margin={[0,0]}\n        >\n        {generateDom(model ?? defaultModel)}\n        </ReactGridLayout>\n    )\n}\n\nexport default GridLayout","export const sides = {\n    left: 1, \n    right: 2, \n    top: 4, \n    bottom: 8,\n    getBorderOnSide: (openSides, test) => (openSides & test) === test ? 0 : '1px' \n}\n\nexport const createCell = (x, y, openSides) => {\n    return {\n        x, \n        y, \n        borderWidth: `${sides.getBorderOnSide(openSides, sides.top)} ${sides.getBorderOnSide(openSides, sides.right)} ${sides.getBorderOnSide(openSides, sides.bottom)} ${sides.getBorderOnSide(openSides, sides.left)}`\n    }\n}","import React from 'react'\nimport GridLayout from \"../Layout/GridLayout\"\nimport { createCell, sides } from '../Layout/CellUtilities'\n\nconst generateModel = (cols, rows) => {\n    const model = []\n\n    for (let i = 0; i < cols; i++) {\n        for (let j = 0; j < rows; j++) {\n            if (i === cols - 1 && j === 0)\n                model.push(createCell(i, j, sides.left | sides.bottom))\n            else if (i === cols - 1 && j === rows - 1)\n                model.push(createCell(i, j, sides.top | sides.left))\n            else if (i === cols - 1)\n                model.push(createCell(i, j, sides.top | sides.left | sides.bottom))\n            else if (j === 0) {\n                const isLeftOpen = i !== 0\n                let openSides = sides.right | sides.bottom\n                if (isLeftOpen)\n                    openSides = openSides | sides.left\n                model.push(createCell(i, j, openSides))\n            }\n            else {\n                const rand = Math.floor(Math.random() * 2)\n                const isTopOpen = !rand\n                const isRightOpen = rand\n                const isBottomOpen = j !== rows - 1\n                const isLeftOpen = i !== 0\n                let openSides = isTopOpen ? sides.top : 0\n                if (isRightOpen)\n                    openSides = openSides | sides.right\n                if (isBottomOpen)\n                    openSides = openSides | sides.bottom\n                if (isLeftOpen)\n                    openSides = openSides | sides.left\n                model.push(createCell(i, j, openSides))\n            }\n        }\n    }\n\n    console.log(model)\n    return model\n}\n\nconst BinaryTreePage = () => {\n    const square = 12\n    const model = generateModel(square, square)\n\n    return (<div><GridLayout model={model} cols={square}/></div>)\n}\n\nexport default BinaryTreePage","import React from 'react'\nimport { Link, withRouter } from 'react-router-dom'\n\nconst routes = [\n    'BinaryTree',\n]\n\nconst NavItem = ({route}) => (\n    <li>\n        <Link to={`/${route}`}>{route}</Link>\n    </li>\n)\n\nconst HomePage = () => {\n    return (<ul>{routes.map((route, index) => <NavItem key={index} route={route}/>)}</ul>)\n}\n\nexport default withRouter(HomePage)","import React from 'react'\nimport {BrowserRouter, Route, Switch} from 'react-router-dom'\n\nimport BinaryTreePage from '../components/BinaryTree/BinaryTreePage'\nimport HomePage from '../components/Home/HomePage'\n\nconst AppRoutes = () => (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <Switch>\n            <Route path='/' exact component={HomePage}/>\n            <Route path='/BinaryTree' exact component={BinaryTreePage}/>\n        </Switch>\n    </BrowserRouter>\n)\n\nexport default AppRoutes","import './App.css';\nimport AppRoutes from './routes/AppRoutes';\n\nconst App = () => (\n    <AppRoutes />\n)\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}