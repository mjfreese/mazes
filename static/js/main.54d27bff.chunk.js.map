{"version":3,"sources":["components/Layout/GridLayout.js","components/Layout/CellUtilities.js","components/BinaryTree/BinaryTree.js","components/Common/Distances.js","components/Common/Cell.js","components/Common/Grid.js","components/Common/DistanceGrid.js","components/BinaryTree/BinaryTreePage.js","components/Sidewinder/SidewinderPage.js","components/Sidewinder/Sidewinder.js","components/Common/GridPage.js","components/Home/HomePage.js","routes/AppRoutes.js","App.js","reportWebVitals.js","index.js"],"names":["ReactGridLayout","WidthProvider","RGL","defaultModel","x","y","borderWidth","generateLayout","model","map","cell","index","w","h","i","generateDom","style","borderStyle","borderColor","textAlign","contents","onLayoutChange","layout","GridLayout","cols","useMeasure","ref","bounds","className","isDraggable","isResizable","margin","rowHeight","width","sides","openSides","test","createDisplayCell","sample","list","randomNumber","length","mult","Math","floor","random","Distances","root","distancesByCoord","cellsByCoord","this","accessor","getCellAccessor","column","row","visitedCell","distance","Cell","north","south","east","west","links","link","bidirectional","push","filter","unlink","getLinks","reduce","acc","cv","distances","frontier","newFrontier","linked","addCell","getDistance","Grid","rows","columns","grid","prepareGrid","prepareCells","j","eachCell","col","getCell","eachRow","DistanceGrid","generateModel","showDistances","binaryTree","neighbors","n","neighbor","createBinaryTree","openWalls","contentsOfCell","BinaryTreePage","sidewinder","run","atEastBound","atNorthBound","member","createSidewinder","SidewinderPage","modelGenerators","name","page","GridPage","useState","numRows","setNumRows","numCols","setNumCols","setShowDistances","Row","Col","xs","InputGroup","Text","FormControl","type","value","onChange","ev","target","max","FormCheck","old","Tabs","defaultActiveKey","transition","gen","Tab","eventKey","title","parseInt","withRouter","AppRoutes","basename","process","path","exact","component","HomePage","App","rel","href","integrity","crossOrigin","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.54d27bff.chunk.js","sourcesContent":["import React from 'react'\nimport RGL, { WidthProvider } from 'react-grid-layout'\nimport useMeasure from 'react-use-measure'\n\nconst ReactGridLayout = WidthProvider(RGL)\n\nconst defaultModel = [{x: 0, y: 0, borderWidth: '1px'}, {x: 1, y: 0, borderWidth: '1px'}, {x: 12, y: 0, borderWidth: '1px'}]\n\nconst generateLayout = (model) => {\n    return model.map((cell, index) => ({x: cell.x, y: cell.y, w: 1, h: 1, i: `${index}`}))\n}\n\nconst generateDom = (model) => {\n    return model.map((cell, index) => (\n        <div\n            key={index} \n            style={{borderStyle: 'solid', borderColor: 'black', borderWidth: cell.borderWidth, textAlign:'center'}}\n        >\n            {cell.contents}\n        </div>\n    ))\n}\n\nconst onLayoutChange = (layout) => {\n    \n}\n\nconst GridLayout = ({model, cols = 4}) => {\n    \n    const [ ref, bounds ] = useMeasure()\n\n    return (\n        <div ref={ref}>\n            <ReactGridLayout\n                layout={generateLayout(model ?? defaultModel)}\n                onLayoutChange={onLayoutChange}\n                className='layout'\n                isDraggable={false}\n                isResizable={false}\n                cols={cols}\n                margin={[0,0]}\n                rowHeight={bounds.width / cols}\n            >\n                {generateDom(model ?? defaultModel)}\n            </ReactGridLayout>\n        </div>\n    )\n}\n\nexport default GridLayout","export const sides = {\n    left: 1, \n    right: 2, \n    top: 4, \n    bottom: 8,\n    getBorderOnSide: (openSides, test) => (openSides & test) === test ? 0 : '1px' \n}\n\nexport const createDisplayCell = (x, y, openSides, contents = '') => {\n    return {\n        x, \n        y, \n        borderWidth: `${sides.getBorderOnSide(openSides, sides.top)} ${sides.getBorderOnSide(openSides, sides.right)} ${sides.getBorderOnSide(openSides, sides.bottom)} ${sides.getBorderOnSide(openSides, sides.left)}`,\n        contents\n    }\n}","import { Grid } from \"../Common/Grid\"\n\nexport const createBinaryTree = (grid) => {\n    if (!grid)\n        return new Grid(4, 4)\n\n    for (const cell of grid.eachCell()) {\n        let neighbors = [cell.north, cell.east]\n        neighbors = [...neighbors.filter(n => !!n)]\n\n        const neighbor = sample(neighbors)\n\n        if (!!neighbor)\n            cell.link(neighbor)\n    }\n\n    return grid\n}\n\nexport const sample = (list) => {\n    return list[randomNumber(list.length)]\n}\n\nexport const randomNumber = (mult) => {\n    return Math.floor(Math.random() * mult)\n}","export class Distances {\n    root\n    distancesByCoord = []\n    cellsByCoord = []\n    \n    constructor(root) {\n        this.root = root\n        const accessor = this.getCellAccessor(root)\n        this.distancesByCoord[accessor] = 0\n        this.cellsByCoord[accessor] = root\n    }\n\n    getCellAccessor(cell) {\n        return `x${cell.column}y${cell.row}`\n    }\n\n    getDistance(cell) {\n        const accessor = this.getCellAccessor(cell)\n        if (this.visitedCell(cell))\n            return this.distancesByCoord[accessor]\n\n        return 0\n    }\n\n    addCell(cell, distance) {\n        const accessor = this.getCellAccessor(cell)\n        this.distancesByCoord[accessor] = distance\n        this.cellsByCoord[accessor] = cell\n    }\n\n    getCellKeys() {\n        return this.cellsByCoord\n    }\n\n    visitedCell(cell) {\n        return !!this.cellsByCoord[this.getCellAccessor(cell)]\n    }\n}","import { sides } from \"../Layout/CellUtilities\"\nimport { Distances } from \"./Distances\"\n\nexport class Cell {\n    row\n    column\n    north\n    south\n    east\n    west\n\n    constructor(row, column, ...links) {\n        this.row = row\n        this.column = column\n        this.north = {}\n        this.south = {}\n        this.east = {}\n        this.west = {}\n        this.links = links ?? []\n    }\n\n    *getLinks() {\n        for (const link of this.links) {\n            yield link;\n        }\n    }\n\n    link(cell, bidirectional = true) {\n        this.links.push(cell)\n\n        if (bidirectional)\n            cell.link(this, false)\n    }\n\n    unlink(cell, bidirectional = true) {\n        this.links = [...this.links.filter(link => link !== cell)]\n\n        if (bidirectional)\n            cell.unlink(this, false)\n    }\n\n    neighbors() {\n        const list = []\n        \n        if (this.north)\n            list.push(this.north)\n        if (this.south)\n            list.push(this.south)\n        if (this.east)\n            list.push(this.east)\n        if (this.west)\n            list.push(this.west)\n\n        return list\n    }\n\n    openWalls() {\n        const list = []\n\n        for (const link of this.getLinks()) {\n            if (link === this.north)\n                list.push(sides.top)\n            else if (link === this.south)\n                list.push(sides.bottom)\n            else if (link === this.east)\n                list.push(sides.right)\n            else if (link === this.west)\n                list.push(sides.left)\n        }\n\n        if (list.length < 1)\n            return []\n\n        return list.reduce((acc, cv) => acc | cv)\n    }\n\n    distances() {\n        const distances = new Distances(this)\n        let frontier = [ this ]\n\n        while(frontier.length > 0) {\n            const newFrontier = []\n            for (const cell of frontier) {\n                for (const linked of cell.links) {\n                    if (distances.visitedCell(linked))\n                        continue\n                    \n                    distances.addCell(linked, distances.getDistance(cell) + 1)\n                    newFrontier.push(linked)\n                }\n            }\n\n            frontier = newFrontier\n        }\n\n        return distances\n    }\n}","import { randomNumber } from '../BinaryTree/BinaryTree'\nimport { Cell } from './Cell'\n\nexport class Grid {\n    constructor(rows, columns) {\n        this.rows = rows\n        this.columns = columns\n        this.grid = this.prepareGrid()\n        this.prepareCells()\n    }\n\n    prepareGrid() {\n        const rows = []\n        for (let i = 0; i < this.rows; i++) {\n            const row = []\n            for (let j = 0; j < this.columns; j++) {\n                row.push(new Cell(i, j))\n            }\n            rows.push(row)\n        }\n\n        return rows\n    }\n\n    prepareCells() {\n        for (const cell of this.eachCell()) {\n            const row = cell.row\n            const col = cell.column\n\n            cell.north = this.getCell(row - 1, col)\n            cell.south = this.getCell(row + 1, col)\n            cell.east = this.getCell(row, col + 1)\n            cell.west = this.getCell(row, col - 1)\n        }\n    }\n\n    getCell(row, col) {\n        if (row >= this.rows || row < 0)\n            return null\n        if (col < 0 || col >= this.grid[row].length)\n            return null\n        \n        return this.grid[row][col]\n    }\n\n    randomCell() {\n        const row = randomNumber(this.rows)\n        const col = randomNumber(this.grid[row].length)\n        return this.getCell(row, col)\n    }\n\n    getSize() {\n        return this.rows * this.columns\n    }\n\n    *eachRow() {\n        for (const row of this.grid){\n            yield row\n        }\n    }\n\n    *eachCell() {\n        for (const row of this.eachRow()) {\n            for (const cell of row) {\n                yield cell\n            }\n        }\n    }\n\n    contentsOfCell(cell) {\n        return ''\n    }\n}","import { Grid } from \"./Grid\";\n\nexport class DistanceGrid extends Grid {\n    distances\n\n    contentsOfCell(cell) {\n        if (!!this.distances)\n            return this.distances.getDistance(cell)\n        else super.contentsOfCell(cell)\n    }\n}","import React from 'react'\nimport GridLayout from \"../Layout/GridLayout\"\nimport { createDisplayCell } from '../Layout/CellUtilities'\nimport { Grid } from '../Common/Grid'\nimport { createBinaryTree } from './BinaryTree'\nimport { DistanceGrid } from '../Common/DistanceGrid'\n\nconst generateModel = (rows, cols, showDistances) => {\n    const model = []\n    const grid = showDistances ? new DistanceGrid(rows, cols) : new Grid(rows, cols)\n    const binaryTree = createBinaryTree(grid)\n\n    if (showDistances)\n    {\n        const start = grid.getCell(0, 0)\n        const distances = start.distances()\n        grid.distances = distances\n    }\n\n    for (const cell of binaryTree.eachCell()) {\n        model.push(createDisplayCell(cell.column, cell.row, cell.openWalls(), grid.contentsOfCell(cell)))\n    }\n\n    return model\n}\n\nconst BinaryTreePage = ({rows = 4, cols = 4, showDistances = false}) => {\n    const model = generateModel(rows, cols, showDistances)\n\n    return (<GridLayout model={model} cols={cols}/>)\n}\n\nexport default BinaryTreePage","import React from 'react'\nimport GridLayout from \"../Layout/GridLayout\"\nimport { createDisplayCell } from '../Layout/CellUtilities'\nimport { Grid } from '../Common/Grid'\nimport { createSidewinder } from './Sidewinder'\nimport { DistanceGrid } from '../Common/DistanceGrid'\n\nconst generateModel = (rows, cols, showDistances) => {\n    const model = []\n\n    const grid = showDistances ? new DistanceGrid(rows, cols) : new Grid(rows, cols)\n    const sidewinder = createSidewinder(grid)\n\n    if (showDistances)\n    {\n        const start = grid.getCell(0, 0)\n        const distances = start.distances()\n        grid.distances = distances\n    }\n\n    for (const cell of sidewinder.eachCell()) {\n        model.push(createDisplayCell(cell.column, cell.row, cell.openWalls(), grid.contentsOfCell(cell)))\n    }\n\n    return model\n}\n\nconst SidewinderPage = ({rows = 4, cols = 4, showDistances = false}) => {\n    const model = generateModel(rows, cols, showDistances)\n\n    return (<GridLayout model={model} cols={cols}/>)\n}\n\nexport default SidewinderPage","import { randomNumber, sample } from \"../BinaryTree/BinaryTree\"\n\nexport const createSidewinder = (grid) => {\n    if (!grid)\n        return\n\n    for (const row of grid.eachRow()) {\n        let run = []\n        for (const cell of row) {\n            run.push(cell)\n\n            const atEastBound = !cell.east\n            const atNorthBound = !cell.north\n            const shouldCloseOut = atEastBound || (!atNorthBound && randomNumber(2) === 0)\n\n            if (shouldCloseOut) {\n                const member = sample(run)\n                \n                if (!!member.north)\n                    member.link(member.north)\n\n                run = []               \n            } else {\n                cell.link(cell.east)\n            }\n        }\n    }\n\n    return grid\n}","import React, { useState } from 'react'\nimport { Col, FormControl, Row, Tab, Tabs, InputGroup, FormCheck } from 'react-bootstrap'\n\nimport BinaryTreePage from '../BinaryTree/BinaryTreePage'\nimport SidewinderPage from '../Sidewinder/SidewinderPage'\n\nconst modelGenerators = [\n    { name: 'Binary Tree', page: BinaryTreePage },\n    { name: 'Sidewinder', page: SidewinderPage },\n]\n\nconst GridPage = () => {\n    const [numRows, setNumRows] = useState(4)\n    const [numCols, setNumCols] = useState(4)\n    const [showDistances, setShowDistances] = useState(false)\n\n    return (\n        <div>\n            <Row>\n                <Col xs={4}>\n                    <InputGroup>\n                        <InputGroup.Text>Rows</InputGroup.Text>\n                        <FormControl \n                            type='number' \n                            value={numRows}\n                            onChange={(ev) => setNumRows(ev.target.value)} \n                            max={20}\n                        />\n                    </InputGroup>\n                </Col>\n                <Col xs={4}>\n                    <InputGroup>\n                        <InputGroup.Text>Columns</InputGroup.Text>\n                        <FormControl \n                            type='number' \n                            value={numCols} \n                            onChange={(ev) => setNumCols(ev.target.value)} \n                            max={20}\n                        />\n                    </InputGroup>\n                </Col>\n                <Col xs={4}>\n                    <InputGroup>\n                        <InputGroup.Text>Show Distances</InputGroup.Text>\n                        <FormCheck\n                            type='switch'\n                            onChange={() => {\n                                setShowDistances(old => !old)\n                            }}\n                        />\n                    </InputGroup>\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n                    <Tabs defaultActiveKey={modelGenerators[0].name} transition={false}>\n                        {\n                            modelGenerators.map((gen, index) => (\n                                <Tab key={index} eventKey={gen.name} title={gen.name}>\n                                    {<gen.page rows={parseInt(numRows)} cols={parseInt(numCols)} showDistances={showDistances}/>}\n                                </Tab>\n                            ))\n                        }\n                    </Tabs>\n                </Col>\n            </Row>\n        </div>\n    )\n}\n\nexport default GridPage","import React from 'react'\nimport { withRouter } from 'react-router-dom'\nimport GridPage from '../Common/GridPage'\n\nconst HomePage = () => {\n    return (<GridPage />)\n}\n\nexport default withRouter(HomePage)","import React from 'react'\nimport {BrowserRouter, Route, Switch} from 'react-router-dom'\n\nimport BinaryTreePage from '../components/BinaryTree/BinaryTreePage'\nimport HomePage from '../components/Home/HomePage'\nimport SidewinderPage from '../components/Sidewinder/SidewinderPage'\n\nconst AppRoutes = () => (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <Switch>\n            <Route path='/' exact component={HomePage} />\n            <Route path='/BinaryTree' exact component={BinaryTreePage} />\n            <Route path='/Sidewinder' exact component={SidewinderPage} />\n        </Switch>\n    </BrowserRouter>\n)\n\nexport default AppRoutes","import './App.css';\nimport AppRoutes from './routes/AppRoutes';\n\nconst App = () => (\n    <div>\n        <link\n            rel=\"stylesheet\"\n            href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.0/dist/css/bootstrap.min.css\"\n            integrity=\"sha384-KyZXEAg3QhqLMpG8r+8fhAXLRk2vvoC2f3B09zVXn8CA5QIVfZOJ3BCsw2P0p/We\"\n            crossOrigin=\"anonymous\"\n        />\n        <AppRoutes />\n    </div>\n)\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}