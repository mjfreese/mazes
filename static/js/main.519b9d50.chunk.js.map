{"version":3,"sources":["components/Layout/GridLayout.js","components/Layout/CellUtilities.js","components/BinaryTree/BinaryTree.js","components/Common/Distances.js","components/Common/Cell.js","components/Common/Grid.js","components/Common/DistanceGrid.js","components/BinaryTree/BinaryTreePage.js","components/Sidewinder/SidewinderPage.js","components/Sidewinder/Sidewinder.js","components/Common/GridPage.js","components/Home/HomePage.js","routes/AppRoutes.js","App.js","reportWebVitals.js","index.js"],"names":["ReactGridLayout","WidthProvider","RGL","defaultModel","x","y","borderWidth","generateLayout","model","map","cell","index","w","h","i","generateDom","style","borderStyle","borderColor","textAlign","background","contents","onLayoutChange","layout","GridLayout","cols","useMeasure","ref","bounds","className","isDraggable","isResizable","margin","rowHeight","width","sides","openSides","test","createDisplayCell","componentToHex","c","hex","toString","length","sample","list","randomNumber","mult","Math","floor","random","Distances","root","distancesByCoord","cellsByCoord","this","accessor","getCellAccessor","column","row","visitedCell","distance","goal","setExit","setEntrance","current","breadCrumbs","goalDist","getDistance","addCell","rootAccessor","currentDistance","getLinks","neighbor","neighborDist","setPath","Cell","north","south","east","west","links","link","bidirectional","push","filter","unlink","reduce","acc","cv","distances","frontier","newFrontier","linked","maxDistance","g","b","red","green","console","log","Grid","rows","columns","grid","prepareGrid","prepareCells","j","eachCell","col","getCell","eachRow","DistanceGrid","generateModel","showDistances","enter","exit","binaryTree","neighbors","n","createBinaryTree","pathTo","openWalls","contentsOfCell","BinaryTreePage","sidewinder","run","atEastBound","atNorthBound","member","createSidewinder","SidewinderPage","modelGenerators","name","page","GridPage","useState","numRows","setNumRows","numCols","setNumCols","setShowDistances","entranceRow","setEntranceRow","entranceCol","setEntranceCol","exitRow","setExitRow","exitCol","setExitCol","Row","Col","xs","InputGroup","Text","FormControl","type","value","onChange","ev","target","max","FormCheck","old","Tabs","defaultActiveKey","transition","gen","Tab","eventKey","title","parseInt","entrance","withRouter","AppRoutes","basename","process","path","exact","component","HomePage","App","rel","href","integrity","crossOrigin","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.519b9d50.chunk.js","sourcesContent":["import React from 'react'\nimport RGL, { WidthProvider } from 'react-grid-layout'\nimport useMeasure from 'react-use-measure'\n\nconst ReactGridLayout = WidthProvider(RGL)\n\nconst defaultModel = [{x: 0, y: 0, borderWidth: '1px'}, {x: 1, y: 0, borderWidth: '1px'}, {x: 12, y: 0, borderWidth: '1px'}]\n\nconst generateLayout = (model) => {\n    return model.map((cell, index) => ({x: cell.x, y: cell.y, w: 1, h: 1, i: `${index}`}))\n}\n\nconst generateDom = (model) => {\n    return model.map((cell, index) => (\n        <div\n            key={index} \n            style={{borderStyle: 'solid', borderColor: 'black', borderWidth: cell.borderWidth, textAlign:'center', background: cell.background}}\n        >\n            {cell.contents}\n        </div>\n    ))\n}\n\nconst onLayoutChange = (layout) => {\n    \n}\n\nconst GridLayout = ({model, cols = 4}) => {\n    \n    const [ ref, bounds ] = useMeasure()\n\n    return (\n        <div ref={ref}>\n            <ReactGridLayout\n                layout={generateLayout(model ?? defaultModel)}\n                onLayoutChange={onLayoutChange}\n                className='layout'\n                isDraggable={false}\n                isResizable={false}\n                cols={cols}\n                margin={[0,0]}\n                rowHeight={bounds.width / cols}\n            >\n                {generateDom(model ?? defaultModel)}\n            </ReactGridLayout>\n        </div>\n    )\n}\n\nexport default GridLayout","export const sides = {\n    left: 1, \n    right: 2, \n    top: 4, \n    bottom: 8,\n    getBorderOnSide: (openSides, test) => (openSides & test) === test ? 0 : '1px' \n}\n\nexport const createDisplayCell = (x, y, openSides, contents = '', background = '#ffffff') => {\n    return {\n        x, \n        y, \n        borderWidth: `${sides.getBorderOnSide(openSides, sides.top)} ${sides.getBorderOnSide(openSides, sides.right)} ${sides.getBorderOnSide(openSides, sides.bottom)} ${sides.getBorderOnSide(openSides, sides.left)}`,\n        contents,\n        background\n    }\n}\n\nconst componentToHex = (c) => {\n    var hex = c.toString(16)\n    return hex.length === 1 ? `0${hex}` : hex\n}\n  \nexport const rgbToHex = (r, g, b) => {\n    return `#${componentToHex(r)}${componentToHex(g)}${componentToHex(b)}`\n}","import { Grid } from \"../Common/Grid\"\n\nexport const createBinaryTree = (grid) => {\n    if (!grid)\n        return new Grid(4, 4)\n\n    for (const cell of grid.eachCell()) {\n        let neighbors = [cell.north, cell.east]\n        neighbors = [...neighbors.filter(n => !!n)]\n\n        const neighbor = sample(neighbors)\n\n        if (!!neighbor)\n            cell.link(neighbor)\n    }\n\n    return grid\n}\n\nexport const sample = (list) => {\n    return list[randomNumber(list.length)]\n}\n\nexport const randomNumber = (mult) => {\n    return Math.floor(Math.random() * mult)\n}","export class Distances {\n    root\n    distancesByCoord = []\n    cellsByCoord = []\n    \n    constructor(root) {\n        this.root = root\n        const accessor = this.getCellAccessor(root)\n        this.distancesByCoord[accessor] = 0\n        this.cellsByCoord[accessor] = root\n    }\n\n    getCellAccessor(cell) {\n        return `x${cell.column}y${cell.row}`\n    }\n\n    getDistance(cell) {\n        const accessor = this.getCellAccessor(cell)\n        if (this.visitedCell(cell))\n            return this.distancesByCoord[accessor]\n    }\n\n    addCell(cell, distance) {\n        const accessor = this.getCellAccessor(cell)\n        this.distancesByCoord[accessor] = distance\n        this.cellsByCoord[accessor] = cell\n    }\n\n    getCellKeys() {\n        return this.cellsByCoord\n    }\n\n    visitedCell(cell) {\n        return !!this.cellsByCoord[this.getCellAccessor(cell)]\n    }\n\n    pathTo(goal) {\n        if (!goal)\n            return\n\n        goal.setExit()\n        this.root.setEntrance()\n        let current = goal\n        let breadCrumbs = new Distances(this.root)\n        const goalDist = this.getDistance(goal)\n\n        breadCrumbs.addCell(current, this.getDistance(current))\n        \n        const rootAccessor = this.getCellAccessor(this.root)\n\n        while (this.getCellAccessor(current) !== rootAccessor) {\n            const currentDistance = this.getDistance(current)\n            for (const neighbor of current.getLinks()) {\n                const neighborDist = this.getDistance(neighbor)\n                if (neighborDist < currentDistance) {\n                    breadCrumbs.addCell(neighbor, neighborDist)\n                    current = neighbor\n\n                    if (this.getCellAccessor(neighbor) !== rootAccessor)\n                        neighbor.setPath(neighborDist, goalDist)\n                    break\n                }\n            }\n        }\n\n        return breadCrumbs\n    }\n}","import { rgbToHex, sides } from \"../Layout/CellUtilities\"\nimport { Distances } from \"./Distances\"\n\nexport class Cell {\n    row\n    column\n    north\n    south\n    east\n    west\n    background = '#ffffff'\n\n    constructor(row, column, ...links) {\n        this.row = row\n        this.column = column\n        this.north = {}\n        this.south = {}\n        this.east = {}\n        this.west = {}\n        this.links = links ?? []\n    }\n\n    *getLinks() {\n        for (const link of this.links) {\n            yield link;\n        }\n    }\n\n    link(cell, bidirectional = true) {\n        this.links.push(cell)\n\n        if (bidirectional)\n            cell.link(this, false)\n    }\n\n    unlink(cell, bidirectional = true) {\n        this.links = [...this.links.filter(link => link !== cell)]\n\n        if (bidirectional)\n            cell.unlink(this, false)\n    }\n\n    neighbors() {\n        const list = []\n        \n        if (this.north)\n            list.push(this.north)\n        if (this.south)\n            list.push(this.south)\n        if (this.east)\n            list.push(this.east)\n        if (this.west)\n            list.push(this.west)\n\n        return list\n    }\n\n    openWalls() {\n        const list = []\n\n        for (const link of this.getLinks()) {\n            if (link === this.north)\n                list.push(sides.top)\n            else if (link === this.south)\n                list.push(sides.bottom)\n            else if (link === this.east)\n                list.push(sides.right)\n            else if (link === this.west)\n                list.push(sides.left)\n        }\n\n        if (list.length < 1)\n            return []\n\n        return list.reduce((acc, cv) => acc | cv)\n    }\n\n    distances() {\n        const distances = new Distances(this)\n        let frontier = [ this ]\n\n        while(frontier.length > 0) {\n            const newFrontier = []\n            for (const cell of frontier) {\n                for (const linked of cell.links) {\n                    if (distances.visitedCell(linked))\n                        continue\n                    \n                    distances.addCell(linked, distances.getDistance(cell) + 1)\n                    newFrontier.push(linked)\n                }\n            }\n\n            frontier = newFrontier\n        }\n\n        return distances\n    }\n\n    setEntrance() {\n        this.background = '#00ff00'\n    }\n\n    setExit() {\n        this.background = '#ff0000'\n    }\n\n    setPath(currentDistance, maxDistance) {\n        const red = Math.floor(255 * currentDistance / maxDistance)\n        const green = Math.floor(255 * (maxDistance - currentDistance) / maxDistance)\n        console.log(red, green)\n        this.background = rgbToHex(red, green, 0)\n    }\n}","import { randomNumber } from '../BinaryTree/BinaryTree'\nimport { Cell } from './Cell'\n\nexport class Grid {\n    constructor(rows, columns) {\n        this.rows = rows\n        this.columns = columns\n        this.grid = this.prepareGrid()\n        this.prepareCells()\n    }\n\n    prepareGrid() {\n        const rows = []\n        for (let i = 0; i < this.rows; i++) {\n            const row = []\n            for (let j = 0; j < this.columns; j++) {\n                row.push(new Cell(i, j))\n            }\n            rows.push(row)\n        }\n\n        return rows\n    }\n\n    prepareCells() {\n        for (const cell of this.eachCell()) {\n            const row = cell.row\n            const col = cell.column\n\n            cell.north = this.getCell(row - 1, col)\n            cell.south = this.getCell(row + 1, col)\n            cell.east = this.getCell(row, col + 1)\n            cell.west = this.getCell(row, col - 1)\n        }\n    }\n\n    getCell(row, col) {\n        if (row >= this.rows || row < 0)\n            return null\n        if (col < 0 || col >= this.grid[row].length)\n            return null\n        \n        return this.grid[row][col]\n    }\n\n    randomCell() {\n        const row = randomNumber(this.rows)\n        const col = randomNumber(this.grid[row].length)\n        return this.getCell(row, col)\n    }\n\n    getSize() {\n        return this.rows * this.columns\n    }\n\n    *eachRow() {\n        for (const row of this.grid){\n            yield row\n        }\n    }\n\n    *eachCell() {\n        for (const row of this.eachRow()) {\n            for (const cell of row) {\n                yield cell\n            }\n        }\n    }\n\n    contentsOfCell(cell) {\n        return ''\n    }\n}","import { Grid } from \"./Grid\";\n\nexport class DistanceGrid extends Grid {\n    distances\n\n    contentsOfCell(cell) {\n        if (!!this.distances)\n            return this.distances.getDistance(cell)\n        else super.contentsOfCell(cell)\n    }\n}","import React from 'react'\nimport GridLayout from \"../Layout/GridLayout\"\nimport { createDisplayCell } from '../Layout/CellUtilities'\nimport { Grid } from '../Common/Grid'\nimport { createBinaryTree } from './BinaryTree'\nimport { DistanceGrid } from '../Common/DistanceGrid'\n\nconst generateModel = (rows, cols, showDistances, enter, exit) => {\n    const model = []\n    const grid = showDistances ? new DistanceGrid(rows, cols) : new Grid(rows, cols)\n    const binaryTree = createBinaryTree(grid)\n\n    if (showDistances)\n    {\n        const start = grid.getCell(...enter)\n        const distances = start.distances()\n        grid.distances = distances.pathTo(grid.getCell(...exit))\n    }\n\n    for (const cell of binaryTree.eachCell()) {\n        model.push(createDisplayCell(\n            cell.column,\n            cell.row, \n            cell.openWalls(), \n            grid.contentsOfCell(cell),\n            cell.background))\n    }\n\n    return model\n}\n\nconst BinaryTreePage = ({rows = 4, cols = 4, showDistances = false, enter = [0, 0], exit = [3, 3]}) => {\n    const model = generateModel(rows, cols, showDistances, enter, exit)\n\n    return (<GridLayout model={model} cols={cols}/>)\n}\n\nexport default BinaryTreePage","import React from 'react'\nimport GridLayout from \"../Layout/GridLayout\"\nimport { createDisplayCell } from '../Layout/CellUtilities'\nimport { Grid } from '../Common/Grid'\nimport { createSidewinder } from './Sidewinder'\nimport { DistanceGrid } from '../Common/DistanceGrid'\n\nconst generateModel = (rows, cols, showDistances, enter, exit) => {\n    const model = []\n\n    const grid = showDistances ? new DistanceGrid(rows, cols) : new Grid(rows, cols)\n    const sidewinder = createSidewinder(grid)\n\n    if (showDistances)\n    {\n        const start = grid.getCell(...enter)\n        const distances = start.distances()\n        grid.distances = distances.pathTo(grid.getCell(...exit))\n    }\n\n    for (const cell of sidewinder.eachCell()) {\n        model.push(createDisplayCell(\n            cell.column, \n            cell.row, \n            cell.openWalls(), \n            grid.contentsOfCell(cell),\n            cell.background))\n    }\n\n    return model\n}\n\nconst SidewinderPage = ({rows = 4, cols = 4, showDistances = false, enter = [0, 0], exit = [3, 3]}) => {\n    const model = generateModel(rows, cols, showDistances, enter, exit)\n\n    return (<GridLayout model={model} cols={cols}/>)\n}\n\nexport default SidewinderPage","import { randomNumber, sample } from \"../BinaryTree/BinaryTree\"\n\nexport const createSidewinder = (grid) => {\n    if (!grid)\n        return\n\n    for (const row of grid.eachRow()) {\n        let run = []\n        for (const cell of row) {\n            run.push(cell)\n\n            const atEastBound = !cell.east\n            const atNorthBound = !cell.north\n            const shouldCloseOut = atEastBound || (!atNorthBound && randomNumber(2) === 0)\n\n            if (shouldCloseOut) {\n                const member = sample(run)\n                \n                if (!!member.north)\n                    member.link(member.north)\n\n                run = []               \n            } else {\n                cell.link(cell.east)\n            }\n        }\n    }\n\n    return grid\n}","import React, { useState } from 'react'\nimport { Col, FormControl, Row, Tab, Tabs, InputGroup, FormCheck } from 'react-bootstrap'\n\nimport BinaryTreePage from '../BinaryTree/BinaryTreePage'\nimport SidewinderPage from '../Sidewinder/SidewinderPage'\n\nconst modelGenerators = [\n    { name: 'Binary Tree', page: BinaryTreePage },\n    { name: 'Sidewinder', page: SidewinderPage },\n]\n\nconst GridPage = () => {\n    const [numRows, setNumRows] = useState(4)\n    const [numCols, setNumCols] = useState(4)\n    const [showDistances, setShowDistances] = useState(false)\n    const [entranceRow, setEntranceRow] = useState(0)\n    const [entranceCol, setEntranceCol] = useState(0)\n    const [exitRow, setExitRow] = useState(3)\n    const [exitCol, setExitCol] = useState(3)\n\n    return (\n        <div>\n            <Row>\n                <Col xs={4}>\n                    <InputGroup>\n                        <InputGroup.Text>Rows</InputGroup.Text>\n                        <FormControl \n                            type='number' \n                            value={numRows}\n                            onChange={(ev) => setNumRows(ev.target.value)} \n                            max={20}\n                        />\n                    </InputGroup>\n                </Col>\n                <Col xs={4}>\n                    <InputGroup>\n                        <InputGroup.Text>Columns</InputGroup.Text>\n                        <FormControl \n                            type='number' \n                            value={numCols} \n                            onChange={(ev) => setNumCols(ev.target.value)} \n                            max={20}\n                        />\n                    </InputGroup>\n                </Col>\n                <Col xs={4}>\n                    <InputGroup>\n                        <InputGroup.Text>Show Solution</InputGroup.Text>\n                        <FormCheck\n                            type='switch'\n                            onChange={() => {\n                                setShowDistances(old => !old)\n                            }}\n                        />\n                    </InputGroup>\n                </Col>\n            </Row>\n            <Row>\n                <Col xs={6}>\n                    <InputGroup>\n                        <InputGroup.Text>Entrance (row, col)</InputGroup.Text>\n                        <FormControl \n                            type='number' \n                            value={entranceRow} \n                            onChange={(ev) => setEntranceRow(ev.target.value)} \n                            max={20}\n                        />\n                        <FormControl \n                            type='number' \n                            value={entranceCol} \n                            onChange={(ev) => setEntranceCol(ev.target.value)} \n                            max={20}\n                        />\n                    </InputGroup>\n                </Col>\n                <Col xs={6}>\n                    <InputGroup>\n                        <InputGroup.Text>Exit (row, col)</InputGroup.Text>\n                        <FormControl \n                            type='number' \n                            value={exitRow} \n                            onChange={(ev) => setExitRow(ev.target.value)} \n                            max={20}\n                        />\n                        <FormControl \n                            type='number' \n                            value={exitCol} \n                            onChange={(ev) => setExitCol(ev.target.value)} \n                            max={20}\n                        />\n                    </InputGroup>\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n                    <Tabs defaultActiveKey={modelGenerators[0].name} transition={false}>\n                        {\n                            modelGenerators.map((gen, index) => (\n                                <Tab key={index} eventKey={gen.name} title={gen.name}>\n                                {\n                                    <gen.page \n                                        rows={parseInt(numRows)} \n                                        cols={parseInt(numCols)} \n                                        showDistances={showDistances}\n                                        entrance={[entranceRow, entranceCol]}\n                                        exit={[exitRow, exitCol]}\n                                    />\n                                }\n                                </Tab>\n                            ))\n                        }\n                    </Tabs>\n                </Col>\n            </Row>\n        </div>\n    )\n}\n\nexport default GridPage","import React from 'react'\nimport { withRouter } from 'react-router-dom'\nimport GridPage from '../Common/GridPage'\n\nconst HomePage = () => {\n    return (<GridPage />)\n}\n\nexport default withRouter(HomePage)","import React from 'react'\nimport {BrowserRouter, Route, Switch} from 'react-router-dom'\n\nimport BinaryTreePage from '../components/BinaryTree/BinaryTreePage'\nimport HomePage from '../components/Home/HomePage'\nimport SidewinderPage from '../components/Sidewinder/SidewinderPage'\n\nconst AppRoutes = () => (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <Switch>\n            <Route path='/' exact component={HomePage} />\n            <Route path='/BinaryTree' exact component={BinaryTreePage} />\n            <Route path='/Sidewinder' exact component={SidewinderPage} />\n        </Switch>\n    </BrowserRouter>\n)\n\nexport default AppRoutes","import './App.css';\nimport AppRoutes from './routes/AppRoutes';\n\nconst App = () => (\n    <div>\n        <link\n            rel=\"stylesheet\"\n            href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.0/dist/css/bootstrap.min.css\"\n            integrity=\"sha384-KyZXEAg3QhqLMpG8r+8fhAXLRk2vvoC2f3B09zVXn8CA5QIVfZOJ3BCsw2P0p/We\"\n            crossOrigin=\"anonymous\"\n        />\n        <AppRoutes />\n    </div>\n)\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}