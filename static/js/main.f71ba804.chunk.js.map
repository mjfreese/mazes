{"version":3,"sources":["components/Layout/GridLayout.js","components/Layout/CellUtilities.js","components/BinaryTree/BinaryTree.js","components/Common/Cell.js","components/Common/Grid.js","components/BinaryTree/BinaryTreePage.js","components/Home/HomePage.js","components/Sidewinder/SidewinderPage.js","components/Sidewinder/Sidewinder.js","routes/AppRoutes.js","App.js","reportWebVitals.js","index.js"],"names":["ReactGridLayout","WidthProvider","RGL","defaultModel","x","y","borderWidth","generateLayout","model","map","cell","index","w","h","i","generateDom","style","borderStyle","borderColor","textAlign","onLayoutChange","layout","GridLayout","cols","className","isDraggable","isResizable","margin","sides","openSides","test","createDisplayCell","sample","list","randomNumber","length","mult","Math","floor","random","Cell","row","column","this","north","south","east","west","links","link","bidirectional","push","filter","unlink","getLinks","reduce","acc","cv","Grid","rows","columns","grid","prepareGrid","prepareCells","j","eachCell","col","getCell","eachRow","generateModel","neighbors","n","neighbor","createBinaryTree","openWalls","BinaryTreePage","routes","NavItem","route","to","withRouter","run","atEastBound","atNorthBound","member","createSidewinder","SidewinderPage","AppRoutes","basename","process","path","exact","component","HomePage","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iPAGMA,EAAkBC,wBAAcC,KAEhCC,EAAe,CAAC,CAACC,EAAG,EAAGC,EAAG,EAAGC,YAAa,OAAQ,CAACF,EAAG,EAAGC,EAAG,EAAGC,YAAa,OAAQ,CAACF,EAAG,GAAIC,EAAG,EAAGC,YAAa,QAE/GC,EAAiB,SAACC,GACpB,OAAOA,EAAMC,KAAI,SAACC,EAAMC,GAAP,MAAkB,CAACP,EAAGM,EAAKN,EAAGC,EAAGK,EAAKL,EAAGO,EAAG,EAAGC,EAAG,EAAGC,EAAE,GAAD,OAAKH,QAG1EI,EAAc,SAACP,GACjB,OAAOA,EAAMC,KAAI,SAACC,EAAMC,GAAP,OACb,qBAEIK,MAAO,CAACC,YAAa,QAASC,YAAa,QAASZ,YAAaI,EAAKJ,YAAaa,UAAU,WADxFR,OAMXS,EAAiB,SAACC,KAoBTC,EAhBI,SAAC,GAAwB,IAAvBd,EAAsB,EAAtBA,MAAsB,IAAfe,YAAe,MAAR,GAAQ,EACvC,OACI,cAACvB,EAAD,CACIqB,OAAQd,EAAc,OAACC,QAAD,IAACA,IAASL,GAChCiB,eAAgBA,EAChBI,UAAU,SACVC,aAAa,EACbC,aAAa,EACbH,KAAMA,EACNI,OAAQ,CAAC,EAAE,GAPf,SASCZ,EAAW,OAACP,QAAD,IAACA,IAASL,MCnCjByB,EACH,EADGA,EAEF,EAFEA,EAGJ,EAHIA,EAID,EAJCA,EAKQ,SAACC,EAAWC,GAAZ,OAAsBD,EAAYC,KAAUA,EAAO,EAAI,OAG/DC,EAAoB,SAAC3B,EAAGC,EAAGwB,GACpC,MAAO,CACHzB,IACAC,IACAC,YAAY,GAAD,OAAKsB,EAAsBC,EAAWD,GAAtC,YAAoDA,EAAsBC,EAAWD,GAArF,YAAqGA,EAAsBC,EAAWD,GAAtI,YAAuJA,EAAsBC,EAAWD,M,wCCE9LI,EAAS,SAACC,GACnB,OAAOA,EAAKC,EAAaD,EAAKE,UAGrBD,EAAe,SAACE,GACzB,OAAOC,KAAKC,MAAMD,KAAKE,SAAWH,ICjBzBI,EAAb,WAQI,WAAYC,EAAKC,GAAmB,oBAChCC,KAAKF,IAAMA,EACXE,KAAKD,OAASA,EACdC,KAAKC,MAAQ,GACbD,KAAKE,MAAQ,GACbF,KAAKG,KAAO,GACZH,KAAKI,KAAO,GANmB,2BAAPC,EAAO,iCAAPA,EAAO,kBAO/BL,KAAKK,MAAL,OAAaA,QAAb,IAAaA,IAAS,GAf9B,sDAkBI,sGACuBL,KAAKK,OAD5B,wDAEQ,OADOC,EADf,iBAEcA,EAFd,qMAlBJ,kBAwBI,SAAKvC,GAA6B,IAAvBwC,IAAsB,yDAC7BP,KAAKK,MAAMG,KAAKzC,GAEZwC,GACAxC,EAAKuC,KAAKN,MAAM,KA5B5B,oBA+BI,SAAOjC,GAA6B,IAAvBwC,IAAsB,yDAC/BP,KAAKK,MAAL,YAAiBL,KAAKK,MAAMI,QAAO,SAAAH,GAAI,OAAIA,IAASvC,MAEhDwC,GACAxC,EAAK2C,OAAOV,MAAM,KAnC9B,uBAsCI,WACI,IAAMV,EAAO,GAWb,OATIU,KAAKC,OACLX,EAAKkB,KAAKR,KAAKC,OACfD,KAAKE,OACLZ,EAAKkB,KAAKR,KAAKE,OACfF,KAAKG,MACLb,EAAKkB,KAAKR,KAAKG,MACfH,KAAKI,MACLd,EAAKkB,KAAKR,KAAKI,MAEZd,IAlDf,uBAqDI,WACI,IADQ,EACFA,EAAO,GADL,cAGWU,KAAKW,YAHhB,IAGR,2BAAoC,CAAC,IAA1BL,EAAyB,QAC5BA,IAASN,KAAKC,MACdX,EAAKkB,KAAKvB,GACLqB,IAASN,KAAKE,MACnBZ,EAAKkB,KAAKvB,GACLqB,IAASN,KAAKG,KACnBb,EAAKkB,KAAKvB,GACLqB,IAASN,KAAKI,MACnBd,EAAKkB,KAAKvB,IAXV,8BAcR,OAAOK,EAAKsB,QAAO,SAACC,EAAKC,GAAN,OAAaD,EAAMC,SAnE9C,KCCaC,EAAb,WACI,WAAYC,EAAMC,GAAU,oBACxBjB,KAAKgB,KAAOA,EACZhB,KAAKiB,QAAUA,EACfjB,KAAKkB,KAAOlB,KAAKmB,cACjBnB,KAAKoB,eALb,+CAQI,WAEI,IADA,IAAMJ,EAAO,GACJ7C,EAAI,EAAGA,EAAI6B,KAAKgB,KAAM7C,IAAK,CAEhC,IADA,IAAM2B,EAAM,GACHuB,EAAI,EAAGA,EAAIrB,KAAKiB,QAASI,IAC9BvB,EAAIU,KAAK,IAAIX,EAAK1B,EAAGkD,IAEzBL,EAAKR,KAAKV,GAGd,OAAOkB,IAlBf,0BAqBI,WAAgB,IAAD,gBACQhB,KAAKsB,YADb,IACX,2BAAoC,CAAC,IAA1BvD,EAAyB,QAC1B+B,EAAM/B,EAAK+B,IACXyB,EAAMxD,EAAKgC,OAEjBhC,EAAKkC,MAAQD,KAAKwB,QAAQ1B,EAAM,EAAGyB,GACnCxD,EAAKmC,MAAQF,KAAKwB,QAAQ1B,EAAM,EAAGyB,GACnCxD,EAAKoC,KAAOH,KAAKwB,QAAQ1B,EAAKyB,EAAM,GACpCxD,EAAKqC,KAAOJ,KAAKwB,QAAQ1B,EAAKyB,EAAM,IAR7B,iCArBnB,qBAiCI,SAAQzB,EAAKyB,GACT,OAAIzB,GAAOE,KAAKgB,MAAQlB,EAAM,GAE1ByB,EAAM,GAAKA,GAAOvB,KAAKkB,KAAKpB,GAAKN,OAD1B,KAIJQ,KAAKkB,KAAKpB,GAAKyB,KAvC9B,wBA0CI,WACI,IAAMzB,EAAMP,EAAaS,KAAKgB,MACxBO,EAAMhC,EAAaS,KAAKkB,KAAKpB,GAAKN,QACxC,OAAOQ,KAAKwB,QAAQ1B,EAAKyB,KA7CjC,qBAgDI,WACI,OAAOvB,KAAKgB,KAAOhB,KAAKiB,UAjDhC,+BAoDI,sGACsBjB,KAAKkB,MAD3B,wDAEQ,OADOpB,EADf,iBAEcA,EAFd,qMApDJ,gCA0DI,4GACsBE,KAAKyB,WAD3B,yDACe3B,EADf,sBAE2BA,GAF3B,yDAGY,OADO/B,EAFnB,kBAGkBA,EAHlB,6VA1DJ,KCGM2D,EAAgB,SAAC9C,EAAMoC,GACzB,IADkC,EAC5BnD,EAAQ,GADoB,cHNN,SAACqD,GAAU,IAAD,gBACnBA,EAAKI,YADc,IACtC,2BAAoC,CAAC,IAA1BvD,EAAyB,QAC5B4D,EAAY,CAAC5D,EAAKkC,MAAOlC,EAAKoC,MAClCwB,EAAS,YAAOA,EAAUlB,QAAO,SAAAmB,GAAC,QAAMA,MAExC,IAAMC,EAAWxC,EAAOsC,GAElBE,GACF9D,EAAKuC,KAAKuB,IARoB,8BAWtC,OAAOX,EGFYY,CAAiB,IAAIf,EAAKnC,EAAMoC,IAAOM,YAHxB,IAGlC,2BAAsE,CAAC,IAA5DvD,EAA2D,QAClEF,EAAM2C,KAAKpB,EAAkBrB,EAAKgC,OAAQhC,EAAK+B,IAAK/B,EAAKgE,eAJ3B,8BAOlC,OAAOlE,GAUImE,EAPQ,WACnB,IACMnE,EAAQ6D,EADC,OAGf,OAAQ,cAAC,EAAD,CAAY7D,MAAOA,EAAOe,KAHnB,MCbbqD,EAAS,CACX,aACA,cAGEC,EAAU,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAF,OACZ,6BACI,cAAC,IAAD,CAAMC,GAAE,WAAMD,GAAd,SAAwBA,OASjBE,eALE,WACb,OAAQ,6BAAKJ,EAAOnE,KAAI,SAACqE,EAAOnE,GAAR,OAAkB,cAAC,EAAD,CAAqBmE,MAAOA,GAAdnE,WCVtD0D,EAAgB,SAAC9C,EAAMoC,GACzB,IADkC,EAC5BnD,EAAQ,GADoB,cCJN,SAACqD,GAAU,IAAD,gBACpBA,EAAKO,WADe,IACtC,2BAAkC,CAAC,IAAD,EAAvB3B,EAAuB,QAC1BwC,EAAM,GADoB,cAEXxC,GAFW,IAE9B,2BAAwB,CAAC,IAAd/B,EAAa,QACpBuE,EAAI9B,KAAKzC,GAET,IAAMwE,GAAexE,EAAKoC,KACpBqC,GAAgBzE,EAAKkC,MAG3B,GAFuBsC,IAAiBC,GAAoC,IAApBjD,EAAa,GAEjD,CAChB,IAAMkD,EAASpD,EAAOiD,GAEhBG,EAAOxC,OACTwC,EAAOnC,KAAKmC,EAAOxC,OAEvBqC,EAAM,QAENvE,EAAKuC,KAAKvC,EAAKoC,OAjBO,gCADI,8BAuBtC,OAAOe,EDhBYwB,CAAiB,IAAI3B,EAAKnC,EAAMoC,IAAOM,YAHxB,IAGlC,2BAAsE,CAAC,IAA5DvD,EAA2D,QAClEF,EAAM2C,KAAKpB,EAAkBrB,EAAKgC,OAAQhC,EAAK+B,IAAK/B,EAAKgE,eAJ3B,8BAOlC,OAAOlE,GAUI8E,EAPQ,WACnB,IACM9E,EAAQ6D,EADC,OAGf,OAAQ,cAAC,EAAD,CAAY7D,MAAOA,EAAOe,KAHnB,MEAJgE,EAVG,kBACd,cAAC,IAAD,CAAeC,SAAUC,SAAzB,SACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWC,IACjC,cAAC,IAAD,CAAOH,KAAK,cAAcC,OAAK,EAACC,UAAWjB,IAC3C,cAAC,IAAD,CAAOe,KAAK,cAAcC,OAAK,EAACC,UAAWN,UCLxCQ,EAJH,kBACR,cAAC,EAAD,KCQWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f71ba804.chunk.js","sourcesContent":["import React from 'react'\nimport RGL, { WidthProvider } from 'react-grid-layout'\n\nconst ReactGridLayout = WidthProvider(RGL)\n\nconst defaultModel = [{x: 0, y: 0, borderWidth: '1px'}, {x: 1, y: 0, borderWidth: '1px'}, {x: 12, y: 0, borderWidth: '1px'}]\n\nconst generateLayout = (model) => {\n    return model.map((cell, index) => ({x: cell.x, y: cell.y, w: 1, h: 1, i: `${index}`}))\n}\n\nconst generateDom = (model) => {\n    return model.map((cell, index) => (\n        <div\n            key={index} \n            style={{borderStyle: 'solid', borderColor: 'black', borderWidth: cell.borderWidth, textAlign:'center'}}\n        />\n    ))\n}\n\nconst onLayoutChange = (layout) => {\n    \n}\n\nconst GridLayout = ({model, cols = 12}) => {\n    return (\n        <ReactGridLayout\n            layout={generateLayout(model ?? defaultModel)}\n            onLayoutChange={onLayoutChange}\n            className='layout'\n            isDraggable={false}\n            isResizable={false}\n            cols={cols}\n            margin={[0,0]}\n        >\n        {generateDom(model ?? defaultModel)}\n        </ReactGridLayout>\n    )\n}\n\nexport default GridLayout","export const sides = {\n    left: 1, \n    right: 2, \n    top: 4, \n    bottom: 8,\n    getBorderOnSide: (openSides, test) => (openSides & test) === test ? 0 : '1px' \n}\n\nexport const createDisplayCell = (x, y, openSides) => {\n    return {\n        x, \n        y, \n        borderWidth: `${sides.getBorderOnSide(openSides, sides.top)} ${sides.getBorderOnSide(openSides, sides.right)} ${sides.getBorderOnSide(openSides, sides.bottom)} ${sides.getBorderOnSide(openSides, sides.left)}`\n    }\n}","export const createBinaryTree = (grid) => {\n    for (const cell of grid.eachCell()) {\n        let neighbors = [cell.north, cell.east]\n        neighbors = [...neighbors.filter(n => !!n)]\n\n        const neighbor = sample(neighbors)\n\n        if (!!neighbor)\n            cell.link(neighbor)\n    }\n\n    return grid\n}\n\nexport const sample = (list) => {\n    return list[randomNumber(list.length)]\n}\n\nexport const randomNumber = (mult) => {\n    return Math.floor(Math.random() * mult)\n}","import { sides } from \"../Layout/CellUtilities\"\n\nexport class Cell {\n    row\n    column\n    north\n    south\n    east\n    west\n\n    constructor(row, column, ...links) {\n        this.row = row\n        this.column = column\n        this.north = {}\n        this.south = {}\n        this.east = {}\n        this.west = {}\n        this.links = links ?? []\n    }\n\n    *getLinks() {\n        for (const link of this.links) {\n            yield link;\n        }\n    }\n\n    link(cell, bidirectional = true) {\n        this.links.push(cell)\n\n        if (bidirectional)\n            cell.link(this, false)\n    }\n\n    unlink(cell, bidirectional = true) {\n        this.links = [...this.links.filter(link => link !== cell)]\n\n        if (bidirectional)\n            cell.unlink(this, false)\n    }\n\n    neighbors() {\n        const list = []\n        \n        if (this.north)\n            list.push(this.north)\n        if (this.south)\n            list.push(this.south)\n        if (this.east)\n            list.push(this.east)\n        if (this.west)\n            list.push(this.west)\n\n        return list\n    }\n\n    openWalls() {\n        const list = []\n\n        for (const link of this.getLinks()) {\n            if (link === this.north)\n                list.push(sides.top)\n            else if (link === this.south)\n                list.push(sides.bottom)\n            else if (link === this.east)\n                list.push(sides.right)\n            else if (link === this.west)\n                list.push(sides.left)\n        }\n\n        return list.reduce((acc, cv) => acc | cv)\n    }\n}","import { randomNumber } from '../BinaryTree/BinaryTree'\nimport { Cell } from './Cell'\n\nexport class Grid {\n    constructor(rows, columns) {\n        this.rows = rows\n        this.columns = columns\n        this.grid = this.prepareGrid()\n        this.prepareCells()\n    }\n\n    prepareGrid() {\n        const rows = []\n        for (let i = 0; i < this.rows; i++) {\n            const row = []\n            for (let j = 0; j < this.columns; j++) {\n                row.push(new Cell(i, j))\n            }\n            rows.push(row)\n        }\n\n        return rows\n    }\n\n    prepareCells() {\n        for (const cell of this.eachCell()) {\n            const row = cell.row\n            const col = cell.column\n\n            cell.north = this.getCell(row - 1, col)\n            cell.south = this.getCell(row + 1, col)\n            cell.east = this.getCell(row, col + 1)\n            cell.west = this.getCell(row, col - 1)\n        }\n    }\n\n    getCell(row, col) {\n        if (row >= this.rows || row < 0)\n            return null\n        if (col < 0 || col >= this.grid[row].length)\n            return null\n        \n        return this.grid[row][col]\n    }\n\n    randomCell() {\n        const row = randomNumber(this.rows)\n        const col = randomNumber(this.grid[row].length)\n        return this.getCell(row, col)\n    }\n\n    getSize() {\n        return this.rows * this.columns\n    }\n\n    *eachRow() {\n        for (const row of this.grid){\n            yield row\n        }\n    }\n\n    *eachCell() {\n        for (const row of this.eachRow()) {\n            for (const cell of row) {\n                yield cell\n            }\n        }\n    }\n}","import React from 'react'\nimport GridLayout from \"../Layout/GridLayout\"\nimport { createDisplayCell } from '../Layout/CellUtilities'\nimport { Grid } from '../Common/Grid'\nimport { createBinaryTree } from './BinaryTree'\n\nconst generateModel = (cols, rows) => {\n    const model = []\n\n    for (const cell of createBinaryTree(new Grid(cols, rows)).eachCell()) {\n        model.push(createDisplayCell(cell.column, cell.row, cell.openWalls()))\n    }\n\n    return model\n}\n\nconst BinaryTreePage = () => {\n    const square = 12\n    const model = generateModel(square, square)\n\n    return (<GridLayout model={model} cols={square}/>)\n}\n\nexport default BinaryTreePage","import React from 'react'\nimport { Link, withRouter } from 'react-router-dom'\n//import GridPage from '../Common/GridPage'\n\nconst routes = [\n    'BinaryTree',\n    'Sidewinder'\n]\n\nconst NavItem = ({route}) => (\n    <li>\n        <Link to={`/${route}`}>{route}</Link>\n    </li>\n)\n\nconst HomePage = () => {\n    return (<ul>{routes.map((route, index) => <NavItem key={index} route={route}/>)}</ul>)\n    //return (<GridPage />)\n}\n\nexport default withRouter(HomePage)","import React from 'react'\nimport GridLayout from \"../Layout/GridLayout\"\nimport { createDisplayCell } from '../Layout/CellUtilities'\nimport { Grid } from '../Common/Grid'\nimport { createSidewinder } from './Sidewinder'\n\nconst generateModel = (cols, rows) => {\n    const model = []\n\n    for (const cell of createSidewinder(new Grid(cols, rows)).eachCell()) {\n        model.push(createDisplayCell(cell.column, cell.row, cell.openWalls()))\n    }\n\n    return model\n}\n\nconst SidewinderPage = () => {\n    const square = 12\n    const model = generateModel(square, square)\n\n    return (<GridLayout model={model} cols={square}/>)\n}\n\nexport default SidewinderPage","import { randomNumber, sample } from \"../BinaryTree/BinaryTree\"\n\nexport const createSidewinder = (grid) => {\n    for (const row of grid.eachRow()) {\n        let run = []\n        for (const cell of row) {\n            run.push(cell)\n\n            const atEastBound = !cell.east\n            const atNorthBound = !cell.north\n            const shouldCloseOut = atEastBound || (!atNorthBound && randomNumber(2) === 0)\n\n            if (shouldCloseOut) {\n                const member = sample(run)\n                \n                if (!!member.north)\n                    member.link(member.north)\n\n                run = []               \n            } else {\n                cell.link(cell.east)\n            }\n        }\n    }\n\n    return grid\n}","import React from 'react'\nimport {BrowserRouter, Route, Switch} from 'react-router-dom'\n\nimport BinaryTreePage from '../components/BinaryTree/BinaryTreePage'\nimport HomePage from '../components/Home/HomePage'\nimport SidewinderPage from '../components/Sidewinder/SidewinderPage'\n\nconst AppRoutes = () => (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <Switch>\n            <Route path='/' exact component={HomePage} />\n            <Route path='/BinaryTree' exact component={BinaryTreePage} />\n            <Route path='/Sidewinder' exact component={SidewinderPage} />\n        </Switch>\n    </BrowserRouter>\n)\n\nexport default AppRoutes","import './App.css';\nimport AppRoutes from './routes/AppRoutes';\n\nconst App = () => (\n    <AppRoutes />\n)\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}