{"version":3,"sources":["components/Layout/GridLayout.js","components/Layout/CellUtilities.js","components/Common/Cell.js","components/Common/Grid.js","components/BinaryTree/BinaryTree.js","components/BinaryTree/BinaryTreePage.js","components/Home/HomePage.js","routes/AppRoutes.js","App.js","reportWebVitals.js","index.js"],"names":["ReactGridLayout","WidthProvider","RGL","defaultModel","x","y","borderWidth","generateLayout","model","map","cell","index","w","h","i","generateDom","style","borderStyle","borderColor","textAlign","onLayoutChange","layout","GridLayout","cols","className","isDraggable","isResizable","margin","sides","openSides","test","Cell","row","column","this","north","south","east","west","links","link","bidirectional","push","filter","unlink","list","getLinks","reduce","acc","cv","Grid","rows","columns","grid","prepareGrid","prepareCells","j","eachCell","col","getCell","length","Math","floor","random","eachRow","sample","generateModel","neighbors","n","neighbor","createBinaryTree","openWalls","BinaryTreePage","routes","NavItem","route","to","withRouter","AppRoutes","basename","process","path","exact","component","HomePage","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4ac6514a.chunk.js","sourcesContent":["import React from 'react'\nimport RGL, { WidthProvider } from 'react-grid-layout'\n\nconst ReactGridLayout = WidthProvider(RGL)\n\nconst defaultModel = [{x: 0, y: 0, borderWidth: '1px'}, {x: 1, y: 0, borderWidth: '1px'}, {x: 12, y: 0, borderWidth: '1px'}]\n\nconst generateLayout = (model) => {\n    return model.map((cell, index) => ({x: cell.x, y: cell.y, w: 1, h: 1, i: `${index}`}))\n}\n\nconst generateDom = (model) => {\n    return model.map((cell, index) => (\n        <div\n            key={index} \n            style={{borderStyle: 'solid', borderColor: 'black', borderWidth: cell.borderWidth, textAlign:'center'}}\n        />\n    ))\n}\n\nconst onLayoutChange = (layout) => {\n    \n}\n\nconst GridLayout = ({model, cols = 12}) => {\n    return (\n        <ReactGridLayout\n            layout={generateLayout(model ?? defaultModel)}\n            onLayoutChange={onLayoutChange}\n            className='layout'\n            isDraggable={false}\n            isResizable={false}\n            cols={cols}\n            margin={[0,0]}\n        >\n        {generateDom(model ?? defaultModel)}\n        </ReactGridLayout>\n    )\n}\n\nexport default GridLayout","export const sides = {\n    left: 1, \n    right: 2, \n    top: 4, \n    bottom: 8,\n    getBorderOnSide: (openSides, test) => (openSides & test) === test ? 0 : '1px' \n}\n\nexport const createDisplayCell = (x, y, openSides) => {\n    return {\n        x, \n        y, \n        borderWidth: `${sides.getBorderOnSide(openSides, sides.top)} ${sides.getBorderOnSide(openSides, sides.right)} ${sides.getBorderOnSide(openSides, sides.bottom)} ${sides.getBorderOnSide(openSides, sides.left)}`\n    }\n}","import { sides } from \"../Layout/CellUtilities\"\n\nexport class Cell {\n    row\n    column\n    north\n    south\n    east\n    west\n\n    constructor(row, column, ...links) {\n        this.row = row\n        this.column = column\n        this.north = {}\n        this.south = {}\n        this.east = {}\n        this.west = {}\n        this.links = links ?? []\n    }\n\n    *getLinks() {\n        for (const link of this.links) {\n            yield link;\n        }\n    }\n\n    link(cell, bidirectional = true) {\n        this.links.push(cell)\n\n        if (bidirectional)\n            cell.link(this, false)\n    }\n\n    unlink(cell, bidirectional = true) {\n        this.links = [...this.links.filter(link => link !== cell)]\n\n        if (bidirectional)\n            cell.unlink(this, false)\n    }\n\n    neighbors() {\n        const list = []\n        \n        if (this.north)\n            list.push(this.north)\n        if (this.south)\n            list.push(this.south)\n        if (this.east)\n            list.push(this.east)\n        if (this.west)\n            list.push(this.west)\n\n        return list\n    }\n\n    openWalls() {\n        const list = []\n\n        for (const link of this.getLinks()) {\n            if (link === this.north)\n                list.push(sides.top)\n            else if (link === this.south)\n                list.push(sides.bottom)\n            else if (link === this.east)\n                list.push(sides.right)\n            else if (link === this.west)\n                list.push(sides.left)\n        }\n\n        return list.reduce((acc, cv) => acc | cv)\n    }\n}","import { Cell } from './Cell'\n\nexport class Grid {\n    constructor(rows, columns) {\n        this.rows = rows\n        this.columns = columns\n        this.grid = this.prepareGrid()\n        this.prepareCells()\n    }\n\n    prepareGrid() {\n        const rows = []\n        for (let i = 0; i < this.rows; i++) {\n            const row = []\n            for (let j = 0; j < this.columns; j++) {\n                row.push(new Cell(i, j))\n            }\n            rows.push(row)\n        }\n\n        return rows\n    }\n\n    prepareCells() {\n        for (const cell of this.eachCell()) {\n            const row = cell.row\n            const col = cell.column\n\n            cell.north = this.getCell(row - 1, col)\n            cell.south = this.getCell(row + 1, col)\n            cell.east = this.getCell(row, col + 1)\n            cell.west = this.getCell(row, col - 1)\n        }\n    }\n\n    getCell(row, col) {\n        if (row >= this.rows || row < 0)\n            return null\n        if (col < 0 || col >= this.grid[row].length)\n            return null\n        \n        return this.grid[row][col]\n    }\n\n    randomCell() {\n        const row = Math.floor(Math.random() * this.rows)\n        const col = Math.floor(Math.random() * this.grid[row].length)\n        return this.getCell(row, col)\n    }\n\n    getSize() {\n        return this.rows * this.columns\n    }\n\n    *eachRow() {\n        for (const row of this.grid){\n            yield row\n        }\n    }\n\n    *eachCell() {\n        for (const row of this.eachRow()) {\n            for (const cell of row) {\n                yield cell\n            }\n        }\n    }\n}","export const createBinaryTree = (grid) => {\n    for (const cell of grid.eachCell()) {\n        let neighbors = [cell.north, cell.east]\n        neighbors = [...neighbors.filter(n => !!n)]\n\n        const neighbor = sample(neighbors)\n\n        if (!!neighbor)\n            cell.link(neighbor)\n    }\n\n    return grid\n}\n\nexport const sample = (list) => {\n    return list[Math.floor(Math.random() * list.length)]\n}","import React from 'react'\nimport GridLayout from \"../Layout/GridLayout\"\nimport { createDisplayCell } from '../Layout/CellUtilities'\nimport { Grid } from '../Common/Grid'\nimport { createBinaryTree } from './BinaryTree'\n\nconst generateModel = (cols, rows) => {\n    const model = []\n\n    for (const cell of createBinaryTree(new Grid(cols, rows)).eachCell()) {\n        model.push(createDisplayCell(cell.column, cell.row, cell.openWalls()))\n    }\n\n    return model\n}\n\nconst BinaryTreePage = () => {\n    const square = 12\n    const model = generateModel(square, square)\n\n    return (<GridLayout model={model} cols={square}/>)\n}\n\nexport default BinaryTreePage","import React from 'react'\nimport { Link, withRouter } from 'react-router-dom'\n\nconst routes = [\n    'BinaryTree',\n]\n\nconst NavItem = ({route}) => (\n    <li>\n        <Link to={`/${route}`}>{route}</Link>\n    </li>\n)\n\nconst HomePage = () => {\n    return (<ul>{routes.map((route, index) => <NavItem key={index} route={route}/>)}</ul>)\n}\n\nexport default withRouter(HomePage)","import React from 'react'\nimport {BrowserRouter, Route, Switch} from 'react-router-dom'\n\nimport BinaryTreePage from '../components/BinaryTree/BinaryTreePage'\nimport HomePage from '../components/Home/HomePage'\n\nconst AppRoutes = () => (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <Switch>\n            <Route path='/' exact component={HomePage}/>\n            <Route path='/BinaryTree' exact component={BinaryTreePage}/>\n        </Switch>\n    </BrowserRouter>\n)\n\nexport default AppRoutes","import './App.css';\nimport AppRoutes from './routes/AppRoutes';\n\nconst App = () => (\n    <AppRoutes />\n)\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}