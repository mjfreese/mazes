{"version":3,"sources":["components/Layout/GridLayout.js","components/BinaryTree/BinaryTreePage.js","components/Home/HomePage.js","routes/AppRoutes.js","App.js","reportWebVitals.js","index.js"],"names":["ReactGridLayout","WidthProvider","RGL","defaultModel","x","y","borderWidth","generateLayout","model","map","cell","index","w","h","i","generateDom","style","borderStyle","borderColor","textAlign","onLayoutChange","layout","GridLayout","cols","className","isDraggable","isResizable","BinaryTreePage","rows","j","push","rand","Math","floor","random","openSide","console","log","generateModel","routes","NavItem","route","to","withRouter","AppRoutes","basename","process","path","exact","component","HomePage","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0c7d8946.chunk.js","sourcesContent":["import React from 'react'\r\nimport RGL, { WidthProvider } from 'react-grid-layout'\r\n\r\nconst ReactGridLayout = WidthProvider(RGL)\r\n\r\nconst defaultModel = [{x: 0, y: 0, borderWidth: '1px'}, {x: 1, y: 0, borderWidth: '1px'}, {x: 12, y: 0, borderWidth: '1px'}]\r\n\r\nconst generateLayout = (model) => {\r\n    return model.map((cell, index) => ({x: cell.x, y: cell.y, w: 1, h: 1, i: `${index}`}))\r\n}\r\n\r\nconst generateDom = (model) => {\r\n    return model.map((cell, index) => (\r\n        <div key={index} style={{borderStyle: 'solid', borderColor: 'black', borderWidth: cell.borderWidth, textAlign:'center'}}>\r\n        </div>\r\n    ))\r\n}\r\n\r\nconst onLayoutChange = (layout) => {\r\n    \r\n}\r\n\r\nconst GridLayout = ({model, cols = 12}) => {\r\n    return (\r\n        <ReactGridLayout\r\n            layout={generateLayout(model ?? defaultModel)}\r\n            onLayoutChange={onLayoutChange}\r\n            className='layout'\r\n            isDraggable={false}\r\n            isResizable={false}\r\n            cols={cols}\r\n        >\r\n        {generateDom(model ?? defaultModel)}\r\n        </ReactGridLayout>\r\n    )\r\n}\r\n\r\nexport default GridLayout","import React from 'react'\r\nimport GridLayout from \"../Layout/GridLayout\"\r\n\r\nconst generateModel = (cols, rows) => {\r\n    const model = []\r\n\r\n    for (let i = 0; i < cols; i++) {\r\n        for (let j = 0; j < rows; j++) {\r\n            if (i === cols - 1 && j === 0)\r\n                model.push({x: i, y: j, borderWidth: '1px 1px 0 0'})\r\n            else if (i === cols - 1 && j === rows - 1)\r\n                model.push({x: i, y: j, borderWidth: '0 1px 1px 0'})\r\n            else if (i === cols - 1)\r\n                model.push({x: i, y: j, borderWidth: '0 1px 0 0'})\r\n            else if (j === 0)\r\n                model.push({x: i, y: j, borderWidth: `1px 0 0 ${i === 0 ? 1 : 0}px`})\r\n            else {\r\n                const rand = Math.floor(Math.random() * 2)\r\n                model.push({x: i, y: j, borderWidth: `${rand}px ${rand === 0 ? 1 : 0}px ${j === rows - 1 ? 1 : 0}px ${i === 0 ? 1 : 0}px`, openSide: rand})\r\n            }\r\n        }\r\n    }\r\n\r\n    console.log(model)\r\n    return model\r\n}\r\n\r\nconst BinaryTreePage = () => {\r\n    const square = 12\r\n    const model = generateModel(square, square)\r\n\r\n    return (<div><GridLayout model={model} cols={square}/></div>)\r\n}\r\n\r\nexport default BinaryTreePage","import React from 'react'\r\nimport { Link, withRouter } from 'react-router-dom'\r\n\r\nconst routes = [\r\n    'BinaryTree',\r\n]\r\n\r\nconst NavItem = ({route}) => (\r\n    <li>\r\n        <Link to={`/${route}`}>{route}</Link>\r\n    </li>\r\n)\r\n\r\nconst HomePage = () => {\r\n    return (<ul>{routes.map((route, index) => <NavItem key={index} route={route}/>)}</ul>)\r\n}\r\n\r\nexport default withRouter(HomePage)","import React from 'react'\r\nimport {BrowserRouter, Route, Switch} from 'react-router-dom'\r\n\r\nimport BinaryTreePage from '../components/BinaryTree/BinaryTreePage'\r\nimport HomePage from '../components/Home/HomePage'\r\n\r\nconst AppRoutes = () => (\r\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n        <Switch>\r\n            <Route path='/' exact component={HomePage}/>\r\n            <Route path='/BinaryTree' exact component={BinaryTreePage}/>\r\n        </Switch>\r\n    </BrowserRouter>\r\n)\r\n\r\nexport default AppRoutes","import './App.css';\nimport AppRoutes from './routes/AppRoutes';\n\nconst App = () => (\n    <AppRoutes />\n)\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}